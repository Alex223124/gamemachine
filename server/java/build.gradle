apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
//apply plugin:'application'
apply plugin:'scala'



buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.0.2'
    classpath group: 'org.javalite', name: 'activejdbc', version: '1.4.9'
    classpath group: 'org.javalite', name: 'activejdbc-instrumentation', version: '1.4.9'
  }
}
apply plugin: 'com.github.johnrengelman.shadow'

group = 'game_machine'
  version = '0.0.1'
  

description = """"""

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  flatDir(dirs: 'third_party')
  mavenCentral()
  
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
  //compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'
  compile group: 'com.typesafe.akka', name: "akka-actor_$scala_version", version:"$akka_version"
  compile group: 'com.typesafe.akka', name: "akka-remote_$scala_version", version:"$akka_version"
  compile group: 'com.typesafe.akka', name: "akka-testkit_$scala_version", version:"$akka_version"
  //compile group: 'com.typesafe.akka', name: "akka-camel_$scala_version", version:"$akka_version"
  compile group: 'com.typesafe.akka', name: "akka-kernel_$scala_version", version:"$akka_version"
  compile group: 'com.typesafe.akka', name: "akka-agent_$scala_version", version:"$akka_version"
  compile group: 'com.typesafe.akka', name: "akka-contrib_$scala_version", version:"$akka_version"
  compile group: 'com.typesafe.akka', name: "akka-cluster_$scala_version", version:"$akka_version"
  //compile group: 'com.typesafe.akka', name: "akka-zeromq_$scala_version", version:"$akka_version"
  
  compile 'com.dyuproject.protostuff:protostuff-uberjar:1.0.8'
  compile 'com.dyuproject.protostuff:protostuff:1.0.8'
  compile 'com.dyuproject.protostuff:protostuff-json:1.0.8'
  
  //compile group: 'com.barchart.udt', name: 'barchart-udt-bundle', version:'2.3.0'
  compile group: 'com.google.code.findbugs', name: 'jsr305', version:'2.0.1'
  compile group: 'org.javassist', name: 'javassist', version:'3.17.1-GA'
  //compile 'org.apache.camel:camel-jetty:2.10.3'
  compile 'com.couchbase.client:couchbase-client:1.4.2'
  //compile 'redis.clients:jedis:2.2.1'
  compile 'org.mapdb:mapdb:1.0.3'
  compile 'io.netty:netty-all:4.0.21.Final'
  compile 'com.jolbox:bonecp:0.8.0.RELEASE'
  compile 'mysql:mysql-connector-java:5.1.31'
  compile 'org.javalite:activejdbc:1.4.9'
  compile 'org.javalite:activejdbc-instrumentation:1.4.9'
}

import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
import org.javalite.instrumentation.Instrumentation

shadowJar {
  transform(AppendingTransformer) {
    resource = 'reference.conf'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}


task uberjar(type: Jar) {
  from files(sourceSets.main.output.classesDir)
  from configurations.runtime.asFileTree.files.collect { zipTree(it) }
}

task codegen(type: Exec) {
	File templateFile = file('protogen.rb')
    commandLine 'jruby',templateFile
}

task protogen(type: Exec)  {
  File configFile = file('src/main/resources/protostuff.properties')
  File jar = file('protostuff-compiler-1.0.8-jarjar.jar')
  commandLine 'java','-jar',jar,configFile
}

test {
  useTestNG()
  //outputs.upToDateWhen { false }
  testLogging.showStandardStreams = true
  dependsOn cleanTest
  testLogging { exceptionFormat "full" }
}
  
task install_libs(type: Copy) {
  into "$buildDir/../lib"
    
  from configurations.runtime
  from "$buildDir/libs"
}

task install_libs_ruby(type: Copy) {
  into "$buildDir/../lib"
  from configurations.runtime
  from "$buildDir/libs"
}

def addUrlIfNotPresent( to, what ) {
    if ( !to || !what ) { return } 
    def urls = to.URLs.toList()
    switch( what.class ) { 
      case URL: what = new File( what.toURI() ); break
      case String: what = new File( what ); break
      case GString: what = new File( what.toString() ); break
      case File: break; // ok
      default:
        println "Don't know how to deal with $what as it is not an URL nor a File"
        System.exit( 1 )
    }

    if ( what.directory && !what.exists() ) { what.mkdirs() }
    def url = what.toURI().toURL()
    if ( !urls.contains( url ) && ( what.directory || !urls.find{ it.path.endsWith( what.name ) } ) ) { 
        to.addURL( url )
    }
}

compileJava.doLast {
    Instrumentation instrumentation = new Instrumentation()
    
    instrumentation.outputDirectory = sourceSets.main.output.classesDir.getPath()
    addUrlIfNotPresent this.class.classLoader.rootLoader, sourceSets.main.output.classesDir.getPath()
    addUrlIfNotPresent Instrumentation.class.classLoader, sourceSets.main.output.classesDir.getPath()
    instrumentation.instrument()
}


