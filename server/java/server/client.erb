
package com.game_machine.client.messages;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.HashMap;
import java.io.UnsupportedEncodingException;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.ProtobufOutput;

import java.io.ByteArrayOutputStream;
import com.dyuproject.protostuff.JsonIOUtil;
import com.dyuproject.protostuff.LinkedBuffer;
import com.dyuproject.protostuff.ProtobufIOUtil;
import com.dyuproject.protostuff.runtime.RuntimeSchema;

import com.game_machine.util.LocalLinkedBuffer;


import java.nio.charset.Charset;

<% has_id = message.getFields.select { |field| field.name == 'id' }.empty? ? false : true %>

import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

<% decl = "public final class #{klass} implements Externalizable, Message<#{klass}>, Schema<#{klass}>" %>

@SuppressWarnings("unused")
<%= decl %>
{

<% message.nestedEnumGroups.each do |group| %>
	public enum <%=group.name %> implements com.dyuproject.protostuff.EnumLite<<%=group.name %>>
    {
    	
    	<% group.values.each do |value| %>
    	<%= "#{value.getName}(#{value.getNumber})" %><%= value.getNumber == (group.values.length - 1) ? ";" : "," %>
    	<% end %>
        
        public final int number;
        
        private <%=group.name %> (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static <%=group.name %> valueOf(int number)
        {
            switch(number) 
            {
            	<% group.values.each do |value| %>
    			case <%= "#{value.getNumber}: return (#{value.getName})" %>;
    			<% end %>
                default: return null;
            }
        }
    }
<% end %>


    public static Schema<<%=klass%>> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static <%=klass%> getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final <%=klass%> DEFAULT_INSTANCE = new <%=klass%>();

<% message.getFields.each do |field| %>
    <% if field.isRepeated %>
    public List<<%=get_type(field)%>> <%=field.name %>;
	<% else %>
	<% if field.default_value.nil? %>
		public <%=get_type(field)%> <%=field.name %>;
	<% else %>
		public <%=get_type(field)%> <%=field.name %>; // = <%= field.default_value %>;
	<% end %>
    
    <% end %>
<% end %>
  
    public <%=klass%>()
    {
        
    }


	

<% message.getFields.each do |field| %>
	<% field_name = field.name.slice(0,1).capitalize + field.name.slice(1..-1) %>
    
    public Boolean has<%=field_name %>()  {
        return <%=field.name%> == null ? false : true;
    }
        
	<% if field.isRepeated %>
	public List<<%=get_type(field)%>> get<%=field_name %>List() {
		if(this.<%=field.name%> == null)
            this.<%=field.name%> = new ArrayList<<%=get_type(field) %>>();
		return <%= field.name %>;
	}

	public <%=klass%> set<%=field_name %>List(List<<%=get_type(field)%>> <%=field.name%>) {
		this.<%=field.name%> = <%=field.name%>;
		return this;
	}

	public <%=get_type(field) %> get<%=field_name %>(int index)  {
        return <%=field.name%> == null ? null : <%=field.name%>.get(index);
    }

    public int get<%=field_name %>Count()  {
        return <%=field.name%> == null ? 0 : <%=field.name%>.size();
    }

    public <%=klass%> add<%=field_name %>(<%=get_type(field) %> <%=field.name%>)  {
        if(this.<%=field.name%> == null)
            this.<%=field.name%> = new ArrayList<<%=get_type(field) %>>();
        this.<%=field.name%>.add(<%=field.name%>);
        return this;
    }
    <% if messages_index.has_key?(get_type(field)) %>
    <% messages_index[get_type(field)].getFields.each do |simple_field| %>
    	<% next unless simple_value?(simple_field) %>
    	<% next if simple_field.isRepeated %>
    	<% simple_field_name = simple_field.name.slice(0,1).capitalize + simple_field.name.slice(1..-1) %>
    	
    public <%=klass%> remove<%=field_name %>By<%=simple_field_name %>(<%=get_type(field) %> <%=field.name%>)  {
    	if(this.<%=field.name%> == null)
           return this;
            
       	Iterator<<%=get_type(field) %>> itr = this.<%=field.name%>.iterator();
       	while (itr.hasNext()) {
    	<%=get_type(field) %> obj = itr.next();
    	
    	<% if simple_field.getJavaType.to_s == 'String' %>
    		if (<%=field.name%>.<%=simple_field.name%>.equals(obj.<%=simple_field.name%>)) {
    	<% else %>
    		if (<%=field.name%>.<%=simple_field.name%>.equals(obj.<%=simple_field.name%>)) {
    	<% end %>
      			itr.remove();
    		}
		}
        return this;
    }
    
    <% end %>
    <% end %>
    	
    
    
    
	<% else %>
	public <%=get_type(field)%> get<%=field_name %>() {
		return <%= field.name %>;
	}
	
	public <%= field_name == '_EntityId' ? 'void' : klass%> set<%=field_name %>(<%=get_type(field)%> <%=field.name%>) {
		this.<%=field.name%> = <%=field.name%>;
		<%= field_name == '_EntityId' ? '' : 'return this;'%>
	}
	
	<% end %>
<% end %>

  
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<<%=klass%>> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public <%=klass%> newMessage()
    {
        return new <%=klass%>();
    }

    public Class<<%=klass%>> typeClass()
    {
        return <%=klass%>.class;
    }

    public String messageName()
    {
        return <%=klass%>.class.getSimpleName();
    }

    public String messageFullName()
    {
        return <%=klass%>.class.getName();
    }

    public boolean isInitialized(<%=klass%> message)
    {
        return true;
    }

    public void mergeFrom(Input input, <%=klass%> message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                <% message.getFields.each do |field| %>
            	case <%=field.number%>:
            	<% if field.isRepeated %>
            		if(message.<%=field.name%> == null)
                        message.<%=field.name%> = new ArrayList<<%=get_type(field)%>>();
                    <% if field.isMessageField %>
                    message.<%=field.name%>.add(input.mergeObject(null, <%=get_type(field)%>.getSchema()));
                    <% elsif field.enumField %>
                    message.<%=field.name%>.add(<%=get_type(field)%>.valueOf(input.readEnum()));
                    <% else %>
                	message.<%=field.name%>.add(input.read<%=field.getClass.getSimpleName%>());
                	<% end %>
                    break;
                <% else %>
                	<% if field.isMessageField %>
                	message.<%=field.name%> = input.mergeObject(message.<%=field.name%>, <%=get_type(field)%>.getSchema());
                    break;
                    <% elsif field.enumField %>
                    message.<%=field.name%> = <%=get_type(field)%>.valueOf(input.readEnum());
                    break;
                	<% else %>
                	message.<%=field.name%> = input.read<%=field.getClass.getSimpleName%>();
                	break;
                	<% end %>
                	
                <% end %>
            	<% end %>
            
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, <%=klass%> message) throws IOException
    {
    	<% message.getFields.each do |field| %>
    	
    	<% if field.isRequired %>
    	if(message.<%=field.name%> == null)
            throw new UninitializedMessageException(message);
    	<% end %>
    	
    	<% if field.isRepeated %>
    	if(message.<%=field.name%> != null)
        {
            for(<%=get_type(field)%> <%=field.name%> : message.<%=field.name%>)
            {
                if(<%=field.name%> != null) {
                   	<% if field.isMessageField %>
    				output.writeObject(<%=field.number%>, <%=field.name%>, <%=get_type(field)%>.getSchema(), true);
    				<% elsif field.enumField %>
    				output.writeEnum(<%=field.number%>, <%=field.name%>.number, true);
    				<% else %>
            		output.write<%=field.getClass.getSimpleName%>(<%=field.number%>, <%=field.name%>, true);
    				<% end %>
    			}
            }
        }
    	<% else %>
    	<% if field.isMessageField %>
    	if(message.<%=field.name%> != null)
    		output.writeObject(<%=field.number%>, message.<%=field.name%>, <%=get_type(field)%>.getSchema(), false);
    	<% elsif field.enumField %>
    	if(message.<%=field.name%> != null)
    	 	output.writeEnum(<%=field.number%>, message.<%=field.name%>.number, false);
    	<% else %>
    	if(message.<%=field.name%> != null)
            output.write<%=field.getClass.getSimpleName%>(<%=field.number%>, message.<%=field.name%>, false);
    	<% end %>
    	
    	<% end %>
        <% end %>
    	
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
        	<% message.getFields.each do |field| %>
        	case <%=field.number%>: return "<%=field.name%>";
        	<% end %>
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
    	<% message.getFields.each do |field| %>
    	__fieldMap.put("<%=field.name%>", <%=field.number%>);
    	<% end %>
    }
   
   public static List<String> getFields() {
	ArrayList<String> fieldNames = new ArrayList<String>();
	String fieldName = null;
	Integer i = 1;
	
    while(true) { 
		fieldName = <%=klass%>.getSchema().getFieldName(i);
		if (fieldName == null) {
			break;
		}
		fieldNames.add(fieldName);
		i++;
	}
	return fieldNames;
}

public static <%=klass%> parseFrom(byte[] bytes) {
	<%=klass%> message = new <%=klass%>();
	ProtobufIOUtil.mergeFrom(bytes, message, <%=klass%>.getSchema());
	return message;
}

public static <%=klass%> parseFromJson(String json) throws IOException {
	byte[] bytes = json.getBytes(Charset.forName("UTF-8"));
	<%=klass%> message = new <%=klass%>();
	JsonIOUtil.mergeFrom(bytes, message, <%=klass%>.getSchema(), false);
	return message;
}

public <%=klass%> clone() {
	byte[] bytes = this.toByteArray();
	<%=klass%> <%=varname(klass)%> = <%=klass%>.parseFrom(bytes);
	return <%=varname(klass)%>;
}
	
public byte[] toByteArray() {
	return toProtobuf();
	//return toJson();
}

public String toJson() {
	boolean numeric = false;
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	try {
		JsonIOUtil.writeTo(out, this, <%=klass%>.getSchema(), numeric);
	} catch (IOException e) {
		e.printStackTrace();
		throw new RuntimeException("Json encoding failed");
	}
	String json = new String(out.toByteArray(), Charset.forName("UTF-8"));
	return json;
}

public byte[] toPrefixedByteArray() {
	LinkedBuffer buffer = LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);
  Schema<<%=klass%>> schema = <%=klass%>.getSchema();
    
	final ByteArrayOutputStream out = new ByteArrayOutputStream();
    final ProtobufOutput output = new ProtobufOutput(buffer);
    try
    {
    	schema.writeTo(output, this);
        final int size = output.getSize();
        ProtobufOutput.writeRawVarInt32Bytes(out, size);
        final int msgSize = LinkedBuffer.writeTo(out, buffer);
        assert size == msgSize;
        
        buffer.clear();
        return out.toByteArray();
    }
    catch (IOException e)
    {
        throw new RuntimeException("Serializing to a byte array threw an IOException " + 
                "(should never happen).", e);
    }
 
}

public byte[] toProtobuf() {
	LinkedBuffer buffer = LocalLinkedBuffer.get();
	byte[] bytes = null;

	try {
		bytes = ProtobufIOUtil.toByteArray(this, <%=klass%>.getSchema(), buffer);
		buffer.clear();
	} catch (Exception e) {
		buffer.clear();
		e.printStackTrace();
		throw new RuntimeException("Protobuf encoding failed");
	}
	return bytes;
}

}
