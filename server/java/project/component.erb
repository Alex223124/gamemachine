
package GameMachine.Messages;


import com.game_machine.core.ActorUtil;
import scala.concurrent.Await;
import scala.concurrent.Future;
import scala.concurrent.duration.Duration;
import akka.actor.ActorSelection;
import akka.pattern.AskableActorSelection;

import akka.util.Timeout;
import java.util.concurrent.TimeUnit;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.HashMap;
import java.io.UnsupportedEncodingException;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.ProtobufOutput;

import java.io.ByteArrayOutputStream;
import com.dyuproject.protostuff.JsonIOUtil;
import com.dyuproject.protostuff.LinkedBuffer;
import com.dyuproject.protostuff.ProtobufIOUtil;
import com.dyuproject.protostuff.runtime.RuntimeSchema;

import com.game_machine.core.LocalLinkedBuffer;

import java.lang.reflect.Field;
import java.nio.charset.Charset;



<% if persistent %>
import com.game_machine.core.GameMachineLoader;
import akka.actor.TypedActor;
import akka.actor.TypedProps;
import akka.actor.ActorSystem;
import com.game_machine.core.ActorUtil;
import org.javalite.activejdbc.Errors;
<% end %>

import org.javalite.activejdbc.Model;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

<% has_id = message.getFields.select { |field| field.name == 'id' }.empty? ? false : true %>
<% decl = "public final class #{klass} implements Externalizable, Message<#{klass}>, Schema<#{klass}>" %>


<% if has_id %>
import com.game_machine.api.Cache;
import com.game_machine.core.CacheUpdate;
import com.game_machine.core.DatastoreCommands;
<% end %>

<%= decl %>
{

<% message.nestedEnumGroups.each do |group| %>
	public enum <%=group.name %> implements com.dyuproject.protostuff.EnumLite<<%=group.name %>>
    {
    	
    	<% group.values.each do |value| %>
    	<%= "#{value.getName}(#{value.getNumber})" %><%= value.getNumber == (group.values.length - 1) ? ";" : "," %>
    	<% end %>
        
        public final int number;
        
        private Corpus (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Corpus valueOf(int number)
        {
            switch(number) 
            {
            	<% group.values.each do |value| %>
    			case <%= "#{value.getNumber}: return (#{value.getName})" %>;
    			<% end %>
                default: return null;
            }
        }
    }
<% end %>


    public static Schema<<%=klass%>> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static <%=klass%> getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final <%=klass%> DEFAULT_INSTANCE = new <%=klass%>();

<% message.getFields.each do |field| %>
    <% if field.isRepeated %>
    public List<<%=get_type(field)%>> <%=field.name %>;
	<% else %>
	<% if field.default_value.nil? %>
		public <%=get_type(field)%> <%=field.name %>;
	<% else %>
		public <%=get_type(field)%> <%=field.name %>; // = <%= field.default_value %>;
	<% end %>
    
    <% end %>
<% end %>
    
<% if has_id %>
	public static <%=klass%>Cache cache() {
		return <%=klass%>Cache.getInstance();
	}
	
	public static <%=klass%>Store store() {
		return <%=klass%>Store.getInstance();
	}
<% end %>


    public <%=klass%>()
    {
        
    }

<% if has_id %>
	static class CacheRef {
	
		private final CacheUpdate cacheUpdate;
		private final String id;
		
		public CacheRef(CacheUpdate cacheUpdate, String id) {
			this.cacheUpdate = cacheUpdate;
			this.id = id;
		}
		
		public void send() {
			ActorSelection sel = ActorUtil.findLocalDistributed("cacheUpdateHandler", id);
			sel.tell(cacheUpdate,null);
		}
		
		public <%=klass%> result(int timeout) {
			ActorSelection sel = ActorUtil.findLocalDistributed("cacheUpdateHandler", id);
			Timeout t = new Timeout(Duration.create(timeout, TimeUnit.MILLISECONDS));
			AskableActorSelection askable = new AskableActorSelection(sel);
			Future<Object> future = askable.ask(cacheUpdate, t);
			try {
				Await.result(future, t.duration());
				return cache().getCache().get(id);
			} catch (Exception e) {
				e.printStackTrace();
				return null;
			}
		}
	}
	
	public static class <%=klass%>Cache {

		private static HashMap<String, Field> cachefields = new HashMap<String, Field>();
		private static Cache<String, <%=klass%>> cache = new Cache<String, <%=klass%>>(120, 5000);
		
		private <%=klass%>Cache() {
		}
		
		private static class LazyHolder {
			private static final <%=klass%>Cache INSTANCE = new <%=klass%>Cache();
		}
	
		public static <%=klass%>Cache getInstance() {
			return LazyHolder.INSTANCE;
		}
		
	    public void init(int expiration, int size) {
			cache = new Cache<String, <%=klass%>>(expiration, size);
		}
	
		public Cache<String, <%=klass%>> getCache() {
			return cache;
		}
		
		public CacheRef setField(String id, String field, Object value) {
			return updateField(id, field, value, CacheUpdate.SET);
		}
		
		public CacheRef incrementField(String id, String field, Object value) {
			return updateField(id, field, value, CacheUpdate.INCREMENT);
		}
		
		public CacheRef decrementField(String id, String field, Object value) {
			return updateField(id, field, value, CacheUpdate.DECREMENT);
		}
		
		private CacheRef updateField(String id, String field, Object value, int updateType) {
			CacheUpdate cacheUpdate = new CacheUpdate(<%=klass%>Cache.class, id, value, field, updateType);
			return new CacheRef(cacheUpdate,id);
		}
		
		public CacheRef set(<%=klass%> message) {
			CacheUpdate cacheUpdate = new CacheUpdate(<%=klass%>Cache.class, message);
			return new CacheRef(cacheUpdate,message.id);
		}
	
		public <%=klass%> get(String id, int timeout) {
			<%=klass%> message = cache.get(id);
			if (message == null) {
				message = <%=klass%>.store().get(id, timeout);
			}
			return message;
		}
			
		public static <%=klass%> setFromUpdate(CacheUpdate cacheUpdate) throws IllegalArgumentException, IllegalAccessException  {
			<%=klass%> message = null;
			String field = cacheUpdate.getField();
			if (field == null) {
				message = (<%=klass%>) cacheUpdate.getMessage();
				if (message == null) {
					throw new RuntimeException("Attempt to store empty message in cache");
				}
				cache.set(message.id, message);
				<%=klass%>.store().set(message);
			} else {
				message = <%=klass%>.cache().get(cacheUpdate.getId(), 10);
				if (message == null) {
					throw new RuntimeException("Cannot set field on null message");
				}
				if (!cachefields.containsKey(field)) {
	            	try {
						cachefields.put(field, <%=klass%>.class.getField(field));
					} catch (NoSuchFieldException e) {
						throw new RuntimeException("No such field "+field);
					} catch (SecurityException e) {
						throw new RuntimeException("Security Exception accessing field "+field);
					}
	        	}
				Field f = cachefields.get(field);
				Class<?> klass = f.getType();
				if (cacheUpdate.getUpdateType() == CacheUpdate.SET) {
					f.set(message, klass.cast(cacheUpdate.getFieldValue()));
				} else {
					int updateType = cacheUpdate.getUpdateType();
					Object value = cacheUpdate.getFieldValue();
					if (klass == Integer.TYPE || klass == Integer.class) {
						Integer i;
						if (updateType == CacheUpdate.INCREMENT) {
							i = (Integer)f.get(message) + (Integer) value;
							f.set(message, klass.cast(i));
						} else if (updateType == CacheUpdate.DECREMENT) {
							i = (Integer)f.get(message) - (Integer) value;
							f.set(message, klass.cast(i));
						}
					} else if (klass == Long.TYPE || klass == Long.class) {
						Long i;
						if (updateType == CacheUpdate.INCREMENT) {
							i = (Long)f.get(message) + (Long) value;
							f.set(message, klass.cast(i));
						} else if (updateType == CacheUpdate.DECREMENT) {
							i = (Long)f.get(message) - (Long) value;
							f.set(message, klass.cast(i));
						}
					} else if (klass == Double.TYPE || klass == Double.class) {
						Double i;
						if (updateType == CacheUpdate.INCREMENT) {
							i = (Double)f.get(message) + (Double) value;
							f.set(message, klass.cast(i));
						} else if (updateType == CacheUpdate.DECREMENT) {
							i = (Double)f.get(message) - (Double) value;
							f.set(message, klass.cast(i));
						}
					} else if (klass == Float.TYPE || klass == Float.class) {
						Float i;
						if (updateType == CacheUpdate.INCREMENT) {
							i = (Float)f.get(message) + (Float) value;
							f.set(message, klass.cast(i));
						} else if (updateType == CacheUpdate.DECREMENT) {
							i = (Float)f.get(message) - (Float) value;
							f.set(message, klass.cast(i));
						}
					}
				}
				cache.set(message.id, message);
				<%=klass%>.store().set(message);
			}
			return message;
		}
	
	}
	
	public static class <%=klass%>Store {
	
		private <%=klass%>Store() {
		}
		
		private static class LazyHolder {
			private static final <%=klass%>Store INSTANCE = new <%=klass%>Store();
		}
	
		public static <%=klass%>Store getInstance() {
			return LazyHolder.INSTANCE;
		}
		
		public static String scopeId(String playerId, String id) {
    		return playerId + "##" + id;
    	}
    
	    public static String unscopeId(String id) {
	    	if (id.contains("##")) {
	    		String[] parts = id.split("##");
	        	return parts[1];
	    	} else {
	    		throw new RuntimeException("Expected "+id+" to contain ##");
	    	}
	    }
	    
	    public static String defaultScope() {
	    	return <%=klass%>.class.getSimpleName();
	    }
		
	    public void set(<%=klass%> message) {
	    	set(defaultScope(),message);
		}
	    
	    public void delete(String id) {
	    	delete(defaultScope(),id);
	    }
	    
	    public <%=klass%> get(String id, int timeout) {
	    	return get(defaultScope(),id,timeout);
	    }
	    
	    public void set(String scope, <%=klass%> message) {
	    	<%=klass%> clone = message.clone();
			clone.id = scopeId(scope,message.id);
			ActorSelection sel = ActorUtil.findDistributed("GameMachine::ObjectDb", clone.id);
			sel.tell(clone, null);
		}
			
		public void delete(String scope, String id) {
			String scopedId = scopeId(scope,id);
			ActorSelection sel = ActorUtil.findDistributed("GameMachine::ObjectDb", scopedId);
			ObjectdbDel del = new ObjectdbDel().setEntityId(scopedId);
			sel.tell(del, null);
		}
			
		public <%=klass%> get(String scope, String id, int timeout) {
			String scopedId = scopeId(scope,id);
			ObjectdbGet get = new ObjectdbGet().setEntityId(scopedId).setKlass("<%=klass%>");
			ActorSelection sel = ActorUtil.findDistributed("GameMachine::ObjectDb", scopedId);
			Timeout t = new Timeout(Duration.create(timeout, TimeUnit.MILLISECONDS));
			AskableActorSelection askable = new AskableActorSelection(sel);
			<%=klass%> message;
			Future<Object> future = askable.ask(get,t);
			try {
				message = (<%=klass%>) Await.result(future, t.duration());
			} catch (Exception e) {
				return null;
			}
			if (message == null) {
				return null;
			}
			message.id = unscopeId(message.id);
			return message;
		}
		
	}
	
<% end %>

	
<% if persistent %>

	public static <%=klass%>Db db() {
		return <%=klass%>Db.getInstance();
	}
	
	public interface <%=klass%>AsyncDb {
		void save(String playerId, <%=klass%> message);
		void delete(String id, String playerId);
	}
	
	public static class <%=klass%>AsyncDbImpl implements <%=klass%>AsyncDb {
	
		public void save(String playerId, <%=klass%> message) {
			<%=klass%>.db().save(playerId, message, false);
	    }
	    
	    public void delete(String id, String playerId) {
	    	<%=klass%>.db().delete(id, playerId);
	    }
	    
	}
	
	public static class <%=klass%>Db {
	
		public Errors dbErrors;
		private <%=klass%>AsyncDb asyncDb = null;
		
		private <%=klass%>Db() {
			start();
		}
		
		public void start() {
			if (asyncDb == null) {
				ActorSystem system = GameMachineLoader.getActorSystem();
				asyncDb = TypedActor.get(system).typedActorOf(new TypedProps<<%=klass%>AsyncDbImpl>(<%=klass%>AsyncDb.class, <%=klass%>AsyncDbImpl.class));
			}
		}
		
		public void stop() {
			if (asyncDb != null) {
				ActorSystem system = GameMachineLoader.getActorSystem();
				TypedActor.get(system).stop(asyncDb);
				asyncDb = null;
			}
		}
		
		private static class LazyHolder {
			private static final <%=klass%>Db INSTANCE = new <%=klass%>Db();
		}
	
		public static <%=klass%>Db getInstance() {
			return LazyHolder.INSTANCE;
		}
		
		public void saveAsync(String playerId, <%=klass%> message) {
			asyncDb.save(playerId, message);
	    }
	    
	    public void deleteAsync(String id, String playerId) {
	    	asyncDb.delete(id, playerId);
	    }
	    		        
	    public Boolean save(String playerId, <%=klass%> message) {
	    	return save(playerId, message, false);
	    }
	        
	    public Boolean save(String playerId, <%=klass%> message, boolean inTransaction) {
	    	if (!inTransaction) {
	    		com.game_machine.orm.models.<%=klass%>.open();
	    	}
	    	
	    	com.game_machine.orm.models.<%=klass%> model = com.game_machine.orm.models.<%=klass%>.findFirst("<%=klass.underscore%>_id = ? and player_id = ?", message.id, playerId);
	    	if (model == null) {
	    		model = new com.game_machine.orm.models.<%=klass%>();
	    		message.toModel(model,playerId);
	    	} else {
	    		message.toModel(model,null);
	    	}
	    	<% message_fields.each do |message_field| %>
	    	if (message.has<%= message_field %>()) {
	    		message.<%= varname(message_field) %>.toModel(model,null);
	    	} else {
	    		<%= message_field %>.clearModel(model);
	    	}
	    	<% end %>
	    	
	    	Boolean res = model.save();
	    	if (!res) {
	    		dbErrors = model.errors();
	    	}
	    	if (!inTransaction) {
	    		com.game_machine.orm.models.<%=klass%>.close();
	    	}
	    	return res;
	    }
	    
	    public Boolean delete(String id, String playerId) {
	    	Boolean result;
	    	com.game_machine.orm.models.<%=klass%>.open();
	    	com.game_machine.orm.models.<%=klass%> model = com.game_machine.orm.models.<%=klass%>.findFirst("<%=klass.underscore%>_id = ? and player_id = ?", id, playerId);
	    	if (model != null) {
	    		result = model.delete();
	    	} else {
	    		result = false;
	    	}
	    	com.game_machine.orm.models.<%=klass%>.close();
	    	return result;
	    }
	    
	    public <%=klass%> find(String id, String playerId) {
	    	return find(id, playerId, false);
	    }
	    
	    public <%=klass%> find(String id, String playerId, boolean inTransaction) {
	    	if (!inTransaction) {
	    		com.game_machine.orm.models.<%=klass%>.open();
	    	}
	    	
	    	com.game_machine.orm.models.<%=klass%> model = com.game_machine.orm.models.<%=klass%>.findFirst("<%=klass.underscore%>_id = ? and player_id = ?", id, playerId);
	    	
	    	if (!inTransaction) {
	    		com.game_machine.orm.models.<%=klass%>.close();
	    	}
	    	
	    	if (model == null) {
	    		return null;
	    	} else {
	    		<%=klass%> <%= varname(klass) %> = fromModel(model);
	    		<% message_fields.each do |message_field| %>
	    		<%= varname(klass) %>.<%= varname(message_field) %> = <%= message_field %>.fromModel(model);
	    		<% end %>
	    		return <%= varname(klass) %>;
	    	}
	    }
	    
	    public List<<%=klass%>> findAll(String playerId) {
	    	com.game_machine.orm.models.<%=klass%>.open();
	    	List<com.game_machine.orm.models.<%=klass%>> models = com.game_machine.orm.models.<%=klass%>.where("player_id = ?", playerId);
	    	List<<%=klass%>> messages = new ArrayList<<%=klass%>>();
	    	for (com.game_machine.orm.models.<%=klass%> model : models) {
	    		<%=klass%> <%= varname(klass) %> = fromModel(model);
	    		<% message_fields.each do |message_field| %>
	    		<%= varname(klass) %>.<%= varname(message_field) %> = <%= message_field %>.fromModel(model);
	    		<% end %>
	    		messages.add(<%= varname(klass) %>);
	    	}
	    	com.game_machine.orm.models.<%=klass%>.close();
	    	return messages;
	    }
	    
	    public List<<%=klass%>> where(String query, Object ... params) {
	    	com.game_machine.orm.models.<%=klass%>.open();
	    	List<com.game_machine.orm.models.<%=klass%>> models = com.game_machine.orm.models.<%=klass%>.where(query, params);
	    	List<<%=klass%>> messages = new ArrayList<<%=klass%>>();
	    	for (com.game_machine.orm.models.<%=klass%> model : models) {
	    		<%=klass%> <%= varname(klass) %> = fromModel(model);
	    		<% message_fields.each do |message_field| %>
	    		<%= varname(klass) %>.<%= varname(message_field) %> = <%= message_field %>.fromModel(model);
	    		<% end %>
	    		messages.add(<%= varname(klass) %>);
	    	}
	    	com.game_machine.orm.models.<%=klass%>.close();
	    	return messages;
	    }
    }
    
<% end %>

<% unless klass == 'Entity' %>

	public static void clearModel(Model model) {
    	<% message.getFields.each do |field| %>
    	<% next unless simple_value?(field) %>
    	<% next if field.isRepeated %>
    	<% field_name = field.name.slice(0,1).capitalize + field.name.slice(1..-1) %>
    	model.set("<%=sql_column_name(klass,field)%>",null);
    	<% end %>
    }
    
	public void toModel(Model model, String playerId) {
    	<% message.getFields.each do |field| %>
    	<% next unless simple_value?(field) %>
    	<% next if field.isRepeated %>
    	<% field_name = field.name.slice(0,1).capitalize + field.name.slice(1..-1) %>
    	if (<%= field.name %> != null) {
    		model.set<%=get_type(field) %>("<%=sql_column_name(klass,field)%>",<%= field.name %>);
    	}
    	<% end %>
    	
    	if (playerId != null) {
    		model.set("player_id",playerId);
    	}
    }
    
	public static <%=klass%> fromModel(Model model) {
		boolean hasFields = false;
    	<%=klass%> message = new <%=klass%>();
    	<% message.getFields.each do |field| %>
    	<% next unless simple_value?(field) %>
    	<% next if field.isRepeated %>
    	<% field_name = field.name.slice(0,1).capitalize + field.name.slice(1..-1) %>
    	
    	<%=get_type(field) %> <%= field.name %>Field = model.get<%=get_type(field) %>("<%=sql_column_name(klass,field)%>");
    	if (<%= field.name %>Field != null) {
    		message.set<%= field_name %>(<%= field.name %>Field);
    		hasFields = true;
    	}
    	<% end %>
    	if (hasFields) {
    		return message;
    	} else {
    		return null;
    	}
    }
<% end %>

<% if klass == 'Entity' %>
	public ArrayList<String> componentNames() {
		ArrayList<String> names = new ArrayList<String>();
	<% messages.each do |m| %>
	  <% if message.getFields.collect {|f| f.name}.include?(varname(m.getName)) %>
		if (this.has<%=m.getName%>()) {
			names.add(this.<%=varname(m.getName)%>.getClass().getSimpleName());
		}
	  <% end %>
	<% end %>
		return names;
	}
<% end %>

<% message.getFields.each do |field| %>
	<% field_name = field.name.slice(0,1).capitalize + field.name.slice(1..-1) %>
    
	<% if field.isRepeated %>
	public List<<%=get_type(field)%>> get<%=field_name %>List() {
		return <%= field.name %>;
	}

	public <%=klass%> set<%=field_name %>List(List<<%=get_type(field)%>> <%=field.name%>) {
		this.<%=field.name%> = <%=field.name%>;
		return this;
	}

	public <%=get_type(field) %> get<%=field_name %>(int index)  {
        return <%=field.name%> == null ? null : <%=field.name%>.get(index);
    }

    public int get<%=field_name %>Count()  {
        return <%=field.name%> == null ? 0 : <%=field.name%>.size();
    }

    public <%=klass%> add<%=field_name %>(<%=get_type(field) %> <%=field.name%>)  {
        if(this.<%=field.name%> == null)
            this.<%=field.name%> = new ArrayList<<%=get_type(field) %>>();
        this.<%=field.name%>.add(<%=field.name%>);
        return this;
    }
    <% if messages_index.has_key?(get_type(field)) %>
    <% messages_index[get_type(field)].getFields.each do |simple_field| %>
    	<% next unless simple_value?(simple_field) %>
    	<% next if simple_field.isRepeated %>
    	<% simple_field_name = simple_field.name.slice(0,1).capitalize + simple_field.name.slice(1..-1) %>
    	
    public <%=klass%> remove<%=field_name %>By<%=simple_field_name %>(<%=get_type(field) %> <%=field.name%>)  {
    	if(this.<%=field.name%> == null)
           return this;
            
       	Iterator<<%=get_type(field) %>> itr = this.<%=field.name%>.iterator();
       	while (itr.hasNext()) {
    	<%=get_type(field) %> obj = itr.next();
    	
    	<% if simple_field.getJavaType.to_s == 'String' %>
    		if (<%=field.name%>.<%=simple_field.name%>.equals(obj.<%=simple_field.name%>)) {
    	<% else %>
    		if (<%=field.name%>.<%=simple_field.name%>.equals(obj.<%=simple_field.name%>)) {
    	<% end %>
      			itr.remove();
    		}
		}
        return this;
    }
    
    <% end %>
    <% end %>
    	
    
    
    
	<% else %>
	public <%=get_type(field)%> get<%=field_name %>() {
		return <%= field.name %>;
	}
	
	public <%= field_name == '_EntityId' ? 'void' : klass%> set<%=field_name %>(<%=get_type(field)%> <%=field.name%>) {
		this.<%=field.name%> = <%=field.name%>;
		<%= field_name == '_EntityId' ? '' : 'return this;'%>
	}
	
	public Boolean has<%=field_name %>()  {
        return <%=field.name%> == null ? false : true;
    }
	<% end %>
<% end %>

  
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<<%=klass%>> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public <%=klass%> newMessage()
    {
        return new <%=klass%>();
    }

    public Class<<%=klass%>> typeClass()
    {
        return <%=klass%>.class;
    }

    public String messageName()
    {
        return <%=klass%>.class.getSimpleName();
    }

    public String messageFullName()
    {
        return <%=klass%>.class.getName();
    }

    public boolean isInitialized(<%=klass%> message)
    {
        return true;
    }

    public void mergeFrom(Input input, <%=klass%> message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                <% message.getFields.each do |field| %>
            	case <%=field.number%>:
            	<% if field.isRepeated %>
            		if(message.<%=field.name%> == null)
                        message.<%=field.name%> = new ArrayList<<%=get_type(field)%>>();
                    <% if field.isMessageField %>
                    message.<%=field.name%>.add(input.mergeObject(null, <%=get_type(field)%>.getSchema()));
                    <% elsif field.enumField %>
                    message.<%=field.name%>.add(<%=get_type(field)%>.valueOf(input.readEnum()));
                    <% else %>
                	message.<%=field.name%>.add(input.read<%=field.getClass.getSimpleName%>());
                	<% end %>
                    break;
                <% else %>
                	<% if field.isMessageField %>
                	message.<%=field.name%> = input.mergeObject(message.<%=field.name%>, <%=get_type(field)%>.getSchema());
                    break;
                    <% elsif field.enumField %>
                    message.<%=field.name%> = <%=classname(field.name)%>.valueOf(input.readEnum());
                    break;
                	<% else %>
                	message.<%=field.name%> = input.read<%=field.getClass.getSimpleName%>();
                	break;
                	<% end %>
                	
                <% end %>
            	<% end %>
            
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, <%=klass%> message) throws IOException
    {
    	<% message.getFields.each do |field| %>
    	
    	<% if field.isRequired %>
    	if(message.<%=field.name%> == null)
            throw new UninitializedMessageException(message);
    	<% end %>
    	
    	<% if field.isRepeated %>
    	if(message.<%=field.name%> != null)
        {
            for(<%=get_type(field)%> <%=field.name%> : message.<%=field.name%>)
            {
                if(<%=field.name%> != null) {
                   	<% if field.isMessageField %>
    				output.writeObject(<%=field.number%>, <%=field.name%>, <%=get_type(field)%>.getSchema(), true);
    				<% elsif field.enumField %>
    				output.writeEnum(<%=field.number%>, <%=field.name%>.number, true);
    				<% else %>
            		output.write<%=field.getClass.getSimpleName%>(<%=field.number%>, <%=field.name%>, true);
    				<% end %>
    			}
            }
        }
    	<% else %>
    	<% if field.isMessageField %>
    	if(message.<%=field.name%> != null)
    		output.writeObject(<%=field.number%>, message.<%=field.name%>, <%=get_type(field)%>.getSchema(), false);
    	<% elsif field.enumField %>
    	 	output.writeEnum(<%=field.number%>, message.<%=field.name%>.number, false);
    	<% else %>
    	if(message.<%=field.name%> != null)
            output.write<%=field.getClass.getSimpleName%>(<%=field.number%>, message.<%=field.name%>, false);
    	<% end %>
    	
    	<% end %>
        <% end %>
    	
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
        	<% message.getFields.each do |field| %>
        	case <%=field.number%>: return "<%=field.name%>";
        	<% end %>
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
    	<% message.getFields.each do |field| %>
    	__fieldMap.put("<%=field.name%>", <%=field.number%>);
    	<% end %>
    }
   
   public static List<String> getFields() {
	ArrayList<String> fieldNames = new ArrayList<String>();
	String fieldName = null;
	Integer i = 1;
	
    while(true) { 
		fieldName = <%=klass%>.getSchema().getFieldName(i);
		if (fieldName == null) {
			break;
		}
		fieldNames.add(fieldName);
		i++;
	}
	return fieldNames;
}

public static <%=klass%> parseFrom(byte[] bytes) {
	<%=klass%> message = new <%=klass%>();
	ProtobufIOUtil.mergeFrom(bytes, message, RuntimeSchema.getSchema(<%=klass%>.class));
	return message;
}

public static <%=klass%> parseFromJson(String json) throws IOException {
	byte[] bytes = json.getBytes(Charset.forName("UTF-8"));
	<%=klass%> message = new <%=klass%>();
	JsonIOUtil.mergeFrom(bytes, message, RuntimeSchema.getSchema(<%=klass%>.class), false);
	return message;
}

public <%=klass%> clone() {
	byte[] bytes = this.toByteArray();
	<%=klass%> <%=varname(klass)%> = <%=klass%>.parseFrom(bytes);
	return <%=varname(klass)%>;
}
	
public byte[] toByteArray() {
	return toProtobuf();
	//return toJson();
}

public String toJson() throws UnsupportedEncodingException {
	boolean numeric = false;
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	try {
		JsonIOUtil.writeTo(out, this, <%=klass%>.getSchema(), numeric);
	} catch (IOException e) {
		e.printStackTrace();
		throw new RuntimeException("Json encoding failed");
	}
	String json = new String(out.toByteArray(), Charset.forName("UTF-8"));
	return json;
}

public byte[] toPrefixedByteArray() {
	LinkedBuffer buffer = LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);
  Schema<<%=klass%>> schema = RuntimeSchema.getSchema(<%=klass%>.class);
    
	final ByteArrayOutputStream out = new ByteArrayOutputStream();
    final ProtobufOutput output = new ProtobufOutput(buffer);
    try
    {
    	schema.writeTo(output, this);
        final int size = output.getSize();
        ProtobufOutput.writeRawVarInt32Bytes(out, size);
        final int msgSize = LinkedBuffer.writeTo(out, buffer);
        assert size == msgSize;
        
        buffer.clear();
        return out.toByteArray();
    }
    catch (IOException e)
    {
        throw new RuntimeException("Serializing to a byte array threw an IOException " + 
                "(should never happen).", e);
    }
 
}

public byte[] toProtobuf() {
	LinkedBuffer buffer = LocalLinkedBuffer.get();
	byte[] bytes = null;

	try {
		bytes = ProtobufIOUtil.toByteArray(this, RuntimeSchema.getSchema(<%=klass%>.class), buffer);
		buffer.clear();
	} catch (Exception e) {
		e.printStackTrace();
		throw new RuntimeException("Protobuf encoding failed");
	}
	return bytes;
}

public ByteBuf toByteBuf() {
	ByteBuf bb = Unpooled.buffer(512, 2048);
	LinkedBuffer buffer = LinkedBuffer.use(bb.array());

	try {
		ProtobufIOUtil.writeTo(buffer, this, RuntimeSchema.getSchema(<%=klass%>.class));
	} catch (Exception e) {
		e.printStackTrace();
		throw new RuntimeException("Protobuf encoding failed");
	}
	return bb;
}

}
