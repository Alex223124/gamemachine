#!/usr/bin/env jruby

ENV['APP_ROOT'] ||= File.expand_path(Dir.pwd)
ENV['JAVA_ROOT'] = File.join(ENV['APP_ROOT'],'java','server')
ENV['GAME_ENV'] = 'default' unless ENV['GAME_ENV']

env_datfile = File.join(ENV['APP_ROOT'],'env.dat')
if File.exist?(env_datfile)
  ENV['GAME_ENV'] = File.read(env_datfile);
end

ARGV << '--help' if ARGV.empty?

aliases = {
  "b"  => "build",
  "s"  => "server",
  "p" => "plugin"
}


command = ARGV.shift
command = aliases[command] || command


require 'rubygems'
require 'fileutils'

def load_game_machine
  begin
    require 'game_machine'
  rescue LoadError
    require_relative '../lib/game_machine'
  end
end

def load_config
  require_relative '../lib/game_machine/app_config'
  GameMachine::AppConfig.instance.load_config
end

require_relative '../lib/game_machine/console'

if command == 'build' || command == 'bundle'
  require_relative '../lib/game_machine/protobuf/game_messages.rb'
  require_relative '../lib/game_machine/protobuf/generate.rb'
  if command == 'bundle'
    GameMachine::Console::Build.new(ARGV,true).run!
  else
    GameMachine::Console::Build.new(ARGV).run!
  end
 

elsif command == 'server'
  #puts 'classpath is ' + java.lang.System.getProperty("java.class.path")
  policyfile = File.join(ENV['APP_ROOT'],'config','app.policy')
  #java.lang.System.setProperty("java.security.policy", policyfile)

  # Need to set environment vars before loading everything.
  server = GameMachine::Console::Server.new(ARGV)
  server.set_environment
  load_game_machine

  #java.lang.System.setSecurityManager(GameMachine::JavaLib::CodeblockSecurityManager.new)

  # Run the server
  server.run!

elsif command == 'plugin'
  install = GameMachine::Console::Install.new(ARGV)
  install.run
else

puts <<EOF
  Usage:
  
  game_machine server               Start the server

  game_machine build  [clean]       Build java and protobuf messages
    
EOF

exit 1
end
