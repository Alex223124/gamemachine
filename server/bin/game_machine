#!/usr/bin/env jruby

ENV['APP_ROOT'] ||= File.expand_path(Dir.pwd)
ENV['JAVA_ROOT'] = File.join(ENV['APP_ROOT'],'java')
ENV['GAME_ENV'] = 'development'

# with the ui stdout/stderr are hidden, so redirect them to the log
if ENV['ADMIN_UI']
  logfile = File.join(ENV['APP_ROOT'], 'log',"#{ENV['GAME_ENV']}.log")
  $stdout.reopen logfile
  $stderr.reopen logfile
end

require 'rubygems'
require 'fileutils'

def load_game_machine
  begin
    require 'game_machine'
  rescue LoadError
    require_relative '../lib/game_machine'
  end
end

ARGV << '--help' if ARGV.empty?

aliases = {
  "n"  => "new",
  "b"  => "build",
  "s"  => "server",
  "sl" => "server_loop"
}

command = ARGV.shift
command = aliases[command] || command


require_relative '../lib/game_machine/console'

if command == 'new'
  bin_path = File.dirname(__FILE__)
  install_source_path = File.expand_path(
    File.join(bin_path,'../')
  )
  GameMachine::Console::Install.new(ARGV,install_source_path).run!

elsif command == 'build'
  require_relative  '../java/local_lib/protostuff-compiler-1.0.8-jarjar.jar'
  require_relative '../lib/game_machine/protobuf/game_messages.rb'
  require_relative '../lib/game_machine/protobuf/generate.rb'
  GameMachine::Console::Build.new(ARGV).run!

elsif command == 'server'
  # Need to set environment vars before loading everything.
  server = GameMachine::Console::Server.new(ARGV)
  server.set_environment
  load_game_machine

  # Run the server
  server.run!

elsif command == 'server_loop'
  GameMachine::Console::Server.run_in_loop
else

puts <<EOF
  Usage:
  
  game_machine server [options]      Start the server
    -r, --restartable                If tmp/gm_restart.txt should trigger a restart
    -s, --server=name                Server name
    -c, --config=name                Configuration file
    -e, --environment=name           Specifies the environment to run under (development/production).
                                     Default: development

  game_machine server_loop           Runs server in loop that restarts when tmp/gm_restart.txt
                                     is present. On restart it will run build then server -r.

  game_machine build                 Generate and compile protobuf messages

  game_machine new [path]            Create a new Game Machine application at the
                                     specified path
    
EOF
end
