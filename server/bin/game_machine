#!/usr/bin/env jruby

ENV['APP_ROOT'] ||= File.expand_path(Dir.pwd)
ENV['JAVA_ROOT'] = File.join(ENV['APP_ROOT'],'java','server')
ENV['GAME_ENV'] = 'development' unless ENV['GAME_ENV']



if ARGV.first == 'server' || ARGV.first == 's'
  require 'java'
  classpath = java.lang.System.get_property("java.class.path")
  unless classpath.match(/project/)
    classpath = File.join(ENV['JAVA_ROOT'],'lib/*')
    gc_opts = "-J-Xmx1024m -J-Xmn800m -J-XX:-UseAdaptiveSizePolicy -J-XX:+UseConcMarkSweepGC -J-XX:+UseParNewGC -J-XX:NewSize=800m -J-XX:MaxNewSize=800m -J-XX:+UseCompressedOops -J-XX:+UnlockDiagnosticVMOptions -J-XX:ParGCCardsPerStrideChunk=32768 -J-XX:MaxTenuringThreshold=1 -J-XX:SurvivorRatio=190 -J-XX:TargetSurvivorRatio=90"
    #-J-XX:+UseG1GC
    #gc_opts = "-J-Xmx256m -J-XX:+UseConcMarkSweepGC -J-XX:+UseParNewGC -J-XX:+UseCompressedOops"
    cmd = "  jruby #{gc_opts} -J-cp \"#{classpath}\" #{File.expand_path(__FILE__)} #{ARGV.join(' ')}"
    puts "Classpath not set, run again using the following commmand:\n#{cmd}"
    #system(cmd)
    exit
  end
end

ARGV << '--help' if ARGV.empty?

aliases = {
  "b"  => "build",
  "s"  => "server"
}

command = ARGV.shift
command = aliases[command] || command


require 'rubygems'
require 'fileutils'

def load_game_machine
  begin
    require 'game_machine'
  rescue LoadError
    require_relative '../lib/game_machine'
  end
end

def load_config
  require_relative '../lib/game_machine/app_config'
  GameMachine::AppConfig.instance.load_config
end



require_relative '../lib/game_machine/console'

if command == 'start_testnode'
  name = ARGV.shift
  cluster = GameMachine::Console::TestCluster.new()
  cluster.start_node(name)
 exit
end

if command == 'ping_testnode'
  load_game_machine
  name = ARGV.shift
  cluster = GameMachine::Console::TestCluster.new()
  cluster.ping_node(name)
 exit
end

if command == 'stop_testnode'
  load_game_machine
  name = ARGV.shift
  cluster = GameMachine::Console::TestCluster.new()
  cluster.stop_node(name)
 exit
end

if command == 'install' || command == 'upgrade'
  bin_path = File.dirname(__FILE__)
  install_source_path = File.expand_path(
    File.join(bin_path,'../')
  )
  GameMachine::Console::Install.new(command,ARGV,install_source_path).run!

elsif command == 'build' || command == 'bundle'
  require_relative  '../java/server/local_lib/protostuff-compiler-1.0.8-jarjar.jar'
  require_relative '../lib/game_machine/protobuf/game_messages.rb'
  require_relative '../lib/game_machine/protobuf/generate.rb'
  if command == 'bundle'
    GameMachine::Console::Build.new(ARGV,true).run!
  else
    GameMachine::Console::Build.new(ARGV).run!
  end
  

elsif command == 'server'
  policyfile = File.join(ENV['APP_ROOT'],'config','app.policy')
  #java.lang.System.setProperty("java.security.policy", policyfile)

  # Need to set environment vars before loading everything.
  server = GameMachine::Console::Server.new(ARGV)
  server.set_environment
  load_game_machine

  #java.lang.System.setSecurityManager(GameMachine::JavaLib::CodeblockSecurityManager.new)

  # Run the server
  server.run!

else

puts <<EOF
  Usage:
  
  game_machine server               Start the server

  game_machine build  [clean]       Build java and protobuf messages

  game_machine bundle               Build and bundle gems for deployment

  game_machine install [path]       Install Game Machine to [path]

  game_machine upgrade [path]       Upgrade the Game Machine installation at [path]
    
EOF

exit 1
end
