
gamemachine {

  environment = development
  use_regions = true
  orm = false
  mono_enabled = false

  client {

    # Sets the protocol and host/port used by the client if set to TCP or UDP.  ANY lets the client use it's own values
    protocol = UDP
  }

  handlers {
    team = "GameMachine::DefaultHandlers::TeamHandler"

    # Authorization handler.  Public allows any authtoken to be used and
    # does not check username/password
    #auth_handler = GameMachine::AuthHandlers::Public
    auth = "GameMachine::DefaultHandlers::Authentication::ObjectStore"

    
    # Class that handles user registration via web page
    #player_register_handler = Example::PlayerRegister
    player_register = "GameMachine::DefaultHandlers::Authentication::PlayerRegister"

  }
  
  routers {
    # Size of the router for incoming message from all clients
    game_handler = 5

    # Also in the pipeline for all incoming requests, should be set the same as
    # game_handler_routers
    request_handler = 5

    # router size for the udp actor that handles all incoming upd messages
    udp = 5

    objectdb =  5
  }
  
  datastore {
    # What data store the object database will use (one of memory, mapdb, or couchbase)
    store = gamecloud

    serialization = json

    # minimum time in milliseconds between writes to the backing store of the same key.  When a message
    # exceeds the limit it is either enqueued, or if already enqueued, it's value is updated, it's
    # value is updated. -1 disables caching.  Default 1000
    cache_write_interval = -1

    # Total writes per second to the backing store that an actor will allow, across all keys.  Note this is on a per actor
    # basis.  If you want to limit total writes per second to your database, this value should be a multiple of the number
    # of write behind cache actors that are started.  -1 disables caching. Default 100
    cache_writes_per_second = -1
  }
  

  gamecloud {
    host = "cloud.gamemachine.io"
    user = test
    #api_key = 294122207690d6e93867c56fae265c24
    api_key = 20934a81ba104ad1936b8a3e9e7fdaef
  }

  grids {
    default = "4000, 50, 1"
    aoe =  "4000, 5, 1"
    local_chat =  "4000, 10, 10"
  }

  couchbase {
    bucket = gamemachine
    password = pass
    servers = ["http://127.0.0.1:8091/pools"]
  }

  jdbc {
    // Postgres
    hostname = 127.0.0.1
    port = 5432
    database = gamemachine
    url = "jdbc:postgresql://127.0.0.1:5432/gamemachine"
    ds = "org.postgresql.ds.PGSimpleDataSource"
    driver = "org.postgresql.Driver"
    username = gamemachine
    password = gamemachine

    // Mysql
    #hostname = 127.0.0.1
    #port = 3306
    #database = gamemachine
    #url = "mysql://127.0.0.1:3306/game_machine"
    #ds = "com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
    #driver = "com.mysql.jdbc.Driver"
    #username = gamemachine
    #password = gamemachine

  }

  http {
    enabled = true
    host = 0.0.0.0
    port = 3000
  }

  udp {
    enabled = true
    host = 0.0.0.0
    port = 24130
  }

  tcp {
    enabled = true
    host = 0.0.0.0
    port = 8910
  }

  akka {
    host = 127.0.0.1
    port = 2551
  }

  seeds = []

  admin {
    user = admin
    pass = pass
  }
  
  regions = [
    ["zone1","GameMachine::DefaultHandlers::ZoneManager"],
    ["zone2", "GameMachine::DefaultHandlers::ZoneManager"]
  ]
}
 
 