
// Used to by the entity tracking system to attack additional fields to your
// tracking updates.  You can change any of the fields in TrackData to suit your
// needs, but do NOT remove the message definition!

message TrackData {
  optional float speed = 1;
  optional float velocity = 2;
  optional Vector3 direction = 3;
  optional string json = 4;
  optional string id = 5;
  optional float x = 6;
  optional float y = 7;
  optional float z = 8;
  optional string entityType = 9;
  optional UnityGameObjects unityGameObjects = 10;
  optional string neighborEntityType = 11;
  optional int32 action = 12;
}


message GameMessage {
  optional Attack attack = 1;
  optional Health health = 2;
}

message GameMessages {
  repeated GameMessage gameMessage = 1;
}

message UnityGameObject {
  required int32 entityType = 1;
  repeated bytes byteArray = 2;
}

message UnityGameObjects {
  repeated UnityGameObject unityGameObject = 1;
}

message Health {
  required  int32  health = 1;
}

message Effect {
  optional  int32  length = 1;
  optional  string  name = 2;
  optional  int32  healthDiff = 3;
  optional  int32  damageDiff = 4;
  optional  int32  timePeriod = 5;
  optional  string  type = 6;
}

message EffectList {
  repeated  Effect  effect = 1;
}

message CombatAbility {
  required  string  name = 1;
  required  int32  damage = 2;
  optional  int32  hitChance = 3;
  required  int32  range = 4;
  optional  string  type = 5;
}

message Attack {
  required  string  attacker = 1;
  required  string  target = 2;
  optional  int32  combatAbilityId = 3;
  optional int32 damage = 4;
}

message IsPlayer {
  optional  bool  enabled = 1;
}

persistent_message TestObject {
  optional string optionalString = 1;
  required string requiredString = 2;
  repeated int32 numbers = 3;
  optional bytes bstring = 4;
  optional bool bvalue = 5;
  optional double dvalue = 6;
  optional float fvalue = 7;
  optional int64 numbers64 = 8;
  repeated Player player = 9;
  enum Corpus {
    UNIVERSAL = 0;
    WEB = 1;
    IMAGES = 2;
    LOCAL = 3;
    NEWS = 4;
    PRODUCTS = 5;
    VIDEO = 6;
  }
  optional Corpus corpus = 10;
  repeated Corpus corpus2 = 11;
}