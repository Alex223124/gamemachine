
gamemachine {

  environment = development
  use_regions = true
  orm = true
  mono_enabled = false
  default_game_id = mygame
  world_offset = 0
  grid_expiration = 20000
  agent_secret = "19f306d5-9c3a-435c-aab7-51fbe0462af8"
  
  plugins = [
  	"CharacterLocation",
  	"PlayerSeed",
  	"EntityManager",
  	"Combat",
  	"CoreCombat",
  	"LandRush",
  	"NpcDemo",
  	"Stats",
  	"Boats",
  	]
  
  client {

    # Sets the protocol and host/port used by the client. If set to TCP or UDP then those protocols are enforced.
    # ANY lets the client use it's own values
    protocol = ANY

    idle_timeout = 20
  }

  handlers {

    # Team handler
    team = "GameMachine::DefaultHandlers::TeamHandler"

    # Authentication handlers.  

    #PublicAuthenticator allows any user/password combination to work
    #auth = "io.gamemachine.authentication.PublicAuthenticator"

    # The default.  Uses salted password hash (bcrypt)
    #auth = "io.gamemachine.authentication.DefaultAuthenticator"

    # Database authentication. Triggers player data to be saved in the database
    auth = "io.gamemachine.authentication.DbAuthenticator"

  }
  
  # These settings control the number of actors for each of the routers, and effect throughput.
  # Generally, game_handler, request_handler, and incoming should be the same, with objectdb set 2-3 times higher.
  routers {

    # Size of the router for incoming message from all clients
    game_handler = 5

    # Also in the pipeline for all incoming requests, should be set the same as
    # game_handler_routers
    request_handler = 5

     # router size for the actor that handles all incoming udp/tcp messages
    incoming = 5

    # Router size for the data/object store.
    objectdb =  5
  }
  
  datastore {
    # What data store the object database will use (one of memory, file, jdbc, or couchbase)
    store = jdbc

    serialization = bytes

    # Write behind cache
    # Both cache_write_interval and cache_writes_per_second must be uncommented for write caching to be enabled.

    # minimum time in milliseconds between writes to the backing store of the same key.  When a message
    # exceeds the limit it is either enqueued, or if already enqueued, it's value is updated.
    cache_write_interval = -1

    # Total writes per second to the backing store that an actor will allow, across all keys.  Note this is on a per actor
    # basis.  The total writes per second is routers.objectdb * cache_writes_per_second.

    # Note that actual writes per second will be somewhat lower then the number you enter here after accounting for
    # overall latency.  On average actual writes are 20% below the target.  
    cache_writes_per_second = -1
  }
  

  gamecloud {

    # The gamecloud is a hosted data store with a REST api backed by couchbase.  It is offered as a service by
    # Game Machine.
    
    user = your_username

    host = "cloud.gamemachine.io:80"
    api_key = your_api_key
  }

  grids = [
      {name: default, grid_size: 100000, cell_size: 100, type: moving},
      {name: aoe, grid_size: 100000, cell_size: 5, type: moving},
      {name: chat, grid_size: 100000, cell_size: 10, type: moving},
      {name: world_objects, grid_size: 100000, cell_size: 100, type: static},
      {name: build_objects, grid_size: 100000, cell_size: 100, type: static},
      {name: vehicles, grid_size: 100000, cell_size: 100, type: moving},
      {name: boats, grid_size: 100000, cell_size: 400, type: moving}
    ]
    
  default_grid = default
  
  regions = [
    {number: 1, name: "region1"},
    {number: 2, name: "region2"},
    {number: 3, name: "region3"},
    {number: 4, name: "region4"},
    {number: 5, name: "region5"}
  ]
  
  zones = [
	  {name: zone1, region: region1, number: 1},
	  {name: zone2, region: region1, number: 2},
	  {name: zone3, region: region2, number: 3},
	  {name: zone4, region: region2, number: 4},
	  {name: zone5, region: region3, number: 5},
	  {name: zone6, region: region3, number: 6},
	  {name: zone7, region: region4, number: 7},
	  {name: zone8, region: region4, number: 8},
	  {name: zone9, region: region5, number: 9},
	  {name: zone10, region: region5, number: 10}
  ]
  
  default_zone = zone1
  max_zones = 100
  
  couchbase {
    bucket = gamemachine
    password = pass
    servers = ["http://127.0.0.1:8091/pools"]
  }

  jdbc {
    
    // Sqlite
    #ds = "org.sqlite.JDBC"
    #url = "jdbc:sqlite:landrush.db"
    #driver = "org.sqlite.JDBC"
    #hostname = 127.0.0.1
    #port = 0
    #database = "jdbc:sqlite:landrush.db"
    #username = pvpgame
    #password = pvpgame


    // Postgres
    hostname = 127.0.0.1
    port = 5432
    database = gamemachine
    url = "jdbc:postgresql://127.0.0.1:5432/gamemachine"
    ds = "org.postgresql.ds.PGSimpleDataSource"
    driver = "org.postgresql.Driver"
    username = gamemachine
    password = gamemachine

    // Mysql
    #hostname = 127.0.0.1
    #port = 3306
    #database = gamemachine
    #url = "jdbc:mysql://127.0.0.1:3306/gamemachine"
    #ds = "com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
    #driver = "com.mysql.jdbc.Driver"
    #username = gamemachine
    #password = gamemachine

  }

  # If you enable ssl for http you must bind to a specific ip.  An ssl key and cert are auto generated on startup
  http {
    enabled = true
    host = 0.0.0.0
    port = 3000
    ssl = false
  }

  udp {
    enabled = true
    host = 0.0.0.0
    port = 24130
  }

  tcp {
    enabled = true
    host = 0.0.0.0
    port = 8910
  }

  akka {
    host = 127.0.0.1
    port = 2551
  }

 

  # Seeds are akka nodes that should already be in the cluster.  We use them as first points of contact to join against
  # If the seeds list is empty, we start the cluster by joining to ourself.  The case of joining ourself should only happen
  # if we are the only node, or if we are the first node.
  #seeds = ["127.0.0.1:9991","127.0.0.1:9992"]
  seeds = []
  
  unity_processes = 0

  test = false
  
  # Deprecated
  admin {
    user = admin
    pass = pass
  }
  
 
 
}
 
 
