# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require File.expand_path('../config/application', __FILE__)
require_relative 'lib/model_generator'
Admin::Application.load_tasks


namespace :protobufs do
  desc "clear out existing protocl buffer definitions"
  task :clear do
    FileList['lib/game_machine/*.pb.rb'].each {|f| rm f}
  end

  desc "compile protocol buffers"
  task :compile => :clear do |t|
      outdir = File.join(File.dirname(__FILE__), 'lib','game_machine')
      outfile = File.join(outdir,'messages.pb.rb')

      protodir = File.join(File.dirname(__FILE__), '../java','src','main','resources')
      protofile = File.join(protodir,'messages.proto')
      rails_protofile = File.join(File.dirname(__FILE__),'messages.proto')

      proto_def = File.read(protofile)
      proto_def.sub!('com.game_machine.entity_system.generated','game_machine.messages')
      File.open(rails_protofile,'w') {|f| f.write(proto_def)}
      system "protoc messages.proto --ruby_out #{outdir}"
      require outfile
      EntitySystem::ModelGenerator.new(outfile).generate

  end

  task :transform do |t|
      outdir = File.join(File.dirname(__FILE__), 'lib','game_machine')
      outfile = File.join(outdir,'messages.pb.rb')
      require outfile
      content = []
      content << "module EntitySystem\n"
      IO.readlines(outfile).each do |line|
        if md = line.match(/class (.*)< ::ProtocolBuffers::Message$/)
          klass_name = md[1].strip
          content << "  class #{klass_name}\n"
          content << "    include ActiveModel::Model\n"
          content << "    include ActiveModel::AttributeMethods\n"
          content << "    attribute_method_prefix 'clear_'\n"

          name = "EntitySystem::Messages::#{md[1]}".strip
          klass = name.constantize
          instance = klass.new
          names = klass.fields.map do |field|
            field.last.name
          end
          attribute_names = names.map do |name|
            ":#{name}"
          end

          argument_names = names.map do |name|
            ":#{name} => #{name}"
          end

          argument_names = argument_names.join(', ')
          attribute_names = attribute_names.join(' ')

          content << "    define_attribute_methods #{attribute_names}\n"
          content << "    attr_accessor #{attribute_names}\n"
          content << "    def clear_attribute(attr)\n"
          content << '      send("#{attr}=", nil)' + "\n"
          content << "    end\n"

          content << "    def to_message\n"
          content << "      #{name}.new(#{argument_names})\n"
          content << "    end\n"
          content << "  end\n"
        end
      end
      content << "end\n"
      content.each {|l| print l}

  end
end
