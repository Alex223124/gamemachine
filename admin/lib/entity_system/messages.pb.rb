#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

module EntitySystem
  # forward declarations
  class Health < ::ProtocolBuffers::Message; end
  class Effect < ::ProtocolBuffers::Message; end
  class EffectList < ::ProtocolBuffers::Message; end
  class CombatAbility < ::ProtocolBuffers::Message; end
  class Attack < ::ProtocolBuffers::Message; end
  class TrackEntity < ::ProtocolBuffers::Message; end
  class RegisterPlayerObserver < ::ProtocolBuffers::Message; end
  class PlayerRegister < ::ProtocolBuffers::Message; end
  class Disconnected < ::ProtocolBuffers::Message; end
  class PlayerLogout < ::ProtocolBuffers::Message; end
  class PlayerAuthenticated < ::ProtocolBuffers::Message; end
  class ClientDisconnect < ::ProtocolBuffers::Message; end
  class ErrorMessage < ::ProtocolBuffers::Message; end
  class ChatChannels < ::ProtocolBuffers::Message; end
  class ChatChannel < ::ProtocolBuffers::Message; end
  class JoinChat < ::ProtocolBuffers::Message; end
  class LeaveChat < ::ProtocolBuffers::Message; end
  class ChatMessage < ::ProtocolBuffers::Message; end
  class ChatRegister < ::ProtocolBuffers::Message; end
  class Subscribe < ::ProtocolBuffers::Message; end
  class Unsubscribe < ::ProtocolBuffers::Message; end
  class Publish < ::ProtocolBuffers::Message; end
  class ObjectdbGet < ::ProtocolBuffers::Message; end
  class ObjectdbPut < ::ProtocolBuffers::Message; end
  class ObjectdbUpdate < ::ProtocolBuffers::Message; end
  class ClientConnection < ::ProtocolBuffers::Message; end
  class PlayerLogin < ::ProtocolBuffers::Message; end
  class Name < ::ProtocolBuffers::Message; end
  class IsNpc < ::ProtocolBuffers::Message; end
  class DestroySingleton < ::ProtocolBuffers::Message; end
  class NotifySingleton < ::ProtocolBuffers::Message; end
  class CreateSingleton < ::ProtocolBuffers::Message; end
  class Player < ::ProtocolBuffers::Message; end
  class Vector3 < ::ProtocolBuffers::Message; end
  class Quaternion < ::ProtocolBuffers::Message; end
  class Transform < ::ProtocolBuffers::Message; end
  class EchoTest < ::ProtocolBuffers::Message; end
  class TestObject < ::ProtocolBuffers::Message; end
  class Neighbors < ::ProtocolBuffers::Message; end
  class GetNeighbors < ::ProtocolBuffers::Message; end
  class Entity < ::ProtocolBuffers::Message; end
  class EntityList < ::ProtocolBuffers::Message; end
  class ClientMessage < ::ProtocolBuffers::Message; end

  class Health < ::ProtocolBuffers::Message
    required :int32, :health, 1
  end

  class Effect < ::ProtocolBuffers::Message
    required :string, :id, 1
    optional :int32, :length, 2
    optional :string, :name, 3
    optional :int32, :healthDiff, 4
    optional :int32, :damageDiff, 5
    optional :int32, :timePeriod, 6
    optional :string, :type, 7
  end

  class EffectList < ::ProtocolBuffers::Message
    repeated ::EntitySystem::Effect, :effect, 1
  end

  class CombatAbility < ::ProtocolBuffers::Message
    required :int32, :id, 1
    required :string, :name, 2
    required :int32, :damage, 3
    optional :int32, :hitChance, 4
    required :int32, :range, 5
    required :string, :type, 6
  end

  class Attack < ::ProtocolBuffers::Message
    required :string, :attacker, 1
    required :string, :target, 2
    required :int32, :combatAbilityId, 3
  end

  class TrackEntity < ::ProtocolBuffers::Message
    required :bool, :value, 1
    optional :bool, :internal, 2
  end

  class RegisterPlayerObserver < ::ProtocolBuffers::Message
    required :string, :playerId, 1
    required :string, :event, 2
  end

  class PlayerRegister < ::ProtocolBuffers::Message
    required :string, :playerId, 1
    required ::EntitySystem::ClientConnection, :clientConnection, 2
    optional :string, :observer, 3
  end

  class Disconnected < ::ProtocolBuffers::Message
    required :string, :playerId, 1
    required :string, :clientId, 2
  end

  class PlayerLogout < ::ProtocolBuffers::Message
    required :string, :playerId, 1
  end

  class PlayerAuthenticated < ::ProtocolBuffers::Message
    required :string, :playerId, 1
  end

  class ClientDisconnect < ::ProtocolBuffers::Message
    required ::EntitySystem::ClientConnection, :clientConnection, 1
  end

  class ErrorMessage < ::ProtocolBuffers::Message
    required :string, :code, 1
    required :string, :message, 2
  end

  class ChatChannels < ::ProtocolBuffers::Message
    repeated ::EntitySystem::ChatChannel, :chatChannel, 1
  end

  class ChatChannel < ::ProtocolBuffers::Message
    required :string, :name, 1
  end

  class JoinChat < ::ProtocolBuffers::Message
    repeated ::EntitySystem::ChatChannel, :chatChannel, 1
  end

  class LeaveChat < ::ProtocolBuffers::Message
    repeated ::EntitySystem::ChatChannel, :chatChannel, 1
  end

  class ChatMessage < ::ProtocolBuffers::Message
    required ::EntitySystem::ChatChannel, :chatChannel, 1
    required :string, :message, 2
    required :string, :type, 3
    optional :string, :senderId, 4
  end

  class ChatRegister < ::ProtocolBuffers::Message
  end

  class Subscribe < ::ProtocolBuffers::Message
    optional :string, :topic, 1
  end

  class Unsubscribe < ::ProtocolBuffers::Message
    required :string, :topic, 1
  end

  class Publish < ::ProtocolBuffers::Message
    optional :string, :topic, 1
    required ::EntitySystem::Entity, :message, 2
    optional :string, :path, 3
  end

  class ObjectdbGet < ::ProtocolBuffers::Message
    required :string, :entityId, 1
  end

  class ObjectdbPut < ::ProtocolBuffers::Message
    required ::EntitySystem::Entity, :entity, 1
  end

  class ObjectdbUpdate < ::ProtocolBuffers::Message
    required :string, :entityId, 1
    required :string, :updateClass, 2
    required :string, :updateMethod, 3
  end

  class ClientConnection < ::ProtocolBuffers::Message
    required :string, :id, 1
    optional :string, :gateway, 2
    optional :string, :server, 3
  end

  class PlayerLogin < ::ProtocolBuffers::Message
    required :string, :username, 1
    required :string, :password, 2
  end

  class Name < ::ProtocolBuffers::Message
    required :string, :value, 1
  end

  class IsNpc < ::ProtocolBuffers::Message
    required :bool, :enabled, 1
  end

  class DestroySingleton < ::ProtocolBuffers::Message
    required :string, :id, 1
  end

  class NotifySingleton < ::ProtocolBuffers::Message
    required :string, :id, 1
  end

  class CreateSingleton < ::ProtocolBuffers::Message
    required :string, :id, 1
    required :string, :controller, 2
  end

  class Player < ::ProtocolBuffers::Message
    required :string, :id, 1
    optional :string, :name, 2
    optional :bool, :authenticated, 3
    optional :string, :authtoken, 4
    optional ::EntitySystem::Transform, :transform, 5
    optional ::EntitySystem::Health, :health, 6
  end

  class Vector3 < ::ProtocolBuffers::Message
    optional :float, :x, 1
    optional :float, :y, 2
    optional :float, :z, 3
    optional :int32, :xi, 4
    optional :int32, :yi, 5
    optional :int32, :zi, 6
  end

  class Quaternion < ::ProtocolBuffers::Message
    optional :float, :w, 1
    optional :float, :x, 2
    optional :float, :y, 3
    optional :float, :z, 4
    optional :int32, :wi, 5
    optional :int32, :xi, 6
    optional :int32, :yi, 7
    optional :int32, :zi, 8
  end

  class Transform < ::ProtocolBuffers::Message
    optional ::EntitySystem::Vector3, :vector3, 1
    optional ::EntitySystem::Quaternion, :quaternion, 2
  end

  class EchoTest < ::ProtocolBuffers::Message
    required :string, :message, 1
  end

  class TestObject < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module Corpus
      include ::ProtocolBuffers::Enum
      UNIVERSAL = 0
      WEB = 1
      IMAGES = 2
      LOCAL = 3
      NEWS = 4
      PRODUCTS = 5
      VIDEO = 6
    end

    optional :string, :optionalString, 1
    required :string, :requiredString, 2
    repeated :int32, :numbers, 3
    optional :bytes, :bstring, 4
    optional :bool, :bvalue, 5
    optional :double, :dvalue, 6
    optional :float, :fvalue, 7
    optional :int64, :numbers64, 8
    repeated ::EntitySystem::Player, :player, 9
    optional ::EntitySystem::TestObject::Corpus, :corpus, 10
    repeated ::EntitySystem::TestObject::Corpus, :corpus2, 11
  end

  class Neighbors < ::ProtocolBuffers::Message
    repeated ::EntitySystem::Entity, :npc, 1
    repeated ::EntitySystem::Entity, :player, 2
  end

  class GetNeighbors < ::ProtocolBuffers::Message
    optional :uint32, :search_radius, 2
    required ::EntitySystem::Vector3, :vector3, 3
    optional :string, :neighborType, 4
    optional :string, :gridName, 5
  end

  class Entity < ::ProtocolBuffers::Message
    optional ::EntitySystem::Player, :player, 1
    optional ::EntitySystem::Neighbors, :neighbors, 2
    optional ::EntitySystem::Health, :health, 3
    optional ::EntitySystem::ChatMessage, :chatMessage, 4
    optional ::EntitySystem::ClientConnection, :clientConnection, 5
    optional ::EntitySystem::EchoTest, :echoTest, 6
    required :string, :id, 7
    optional ::EntitySystem::PlayerLogin, :playerLogin, 8
    optional ::EntitySystem::Subscribe, :subscribe, 9
    optional ::EntitySystem::Publish, :publish, 10
    optional ::EntitySystem::ChatChannel, :chatChannel, 11
    optional ::EntitySystem::JoinChat, :joinChat, 12
    optional ::EntitySystem::LeaveChat, :leaveChat, 13
    optional ::EntitySystem::Unsubscribe, :unsubscribe, 14
    optional ::EntitySystem::ChatRegister, :chatRegister, 15
    optional ::EntitySystem::ChatChannels, :chatChannels, 16
    optional ::EntitySystem::ErrorMessage, :errorMessage, 17
    optional ::EntitySystem::RegisterPlayerObserver, :registerPlayerObserver, 18
    optional ::EntitySystem::GetNeighbors, :getNeighbors, 21
    optional ::EntitySystem::TrackEntity, :trackEntity, 22
    optional ::EntitySystem::Transform, :transform, 23
    optional ::EntitySystem::IsNpc, :isNpc, 24
    optional ::EntitySystem::Vector3, :vector3, 25
    optional ::EntitySystem::CreateSingleton, :createSingleton, 26
    optional ::EntitySystem::EntityList, :entityList, 27
    optional :bool, :published, 29
    optional :string, :entityType, 30
    optional ::EntitySystem::NotifySingleton, :notifySingleton, 31
    optional ::EntitySystem::DestroySingleton, :destroySingleton, 32
    optional ::EntitySystem::Effect, :effect, 33
    optional ::EntitySystem::EffectList, :effectList, 34
    optional ::EntitySystem::Attack, :attack, 35
    optional ::EntitySystem::CombatAbility, :combatAbility, 36
    optional ::EntitySystem::PlayerAuthenticated, :playerAuthenticated, 37
    optional ::EntitySystem::PlayerLogout, :playerLogout, 38
    optional :bool, :sendToPlayer, 39
  end

  class EntityList < ::ProtocolBuffers::Message
    repeated ::EntitySystem::Entity, :entity, 1
  end

  class ClientMessage < ::ProtocolBuffers::Message
    repeated ::EntitySystem::Entity, :entity, 1
    optional ::EntitySystem::Player, :player, 2
    optional ::EntitySystem::PlayerLogin, :playerLogin, 3
    optional ::EntitySystem::ClientConnection, :clientConnection, 4
    optional ::EntitySystem::ClientDisconnect, :clientDisconnect, 5
    optional ::EntitySystem::PlayerLogout, :playerLogout, 6
    optional ::EntitySystem::ErrorMessage, :errorMessage, 17
  end

end
