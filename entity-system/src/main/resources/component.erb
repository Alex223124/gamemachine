
package com.game_machine.entity_system.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;

import java.io.ByteArrayOutputStream;
import com.dyuproject.protostuff.JsonIOUtil;
import com.dyuproject.protostuff.LinkedBuffer;
import com.dyuproject.protostuff.ProtobufIOUtil;
import com.dyuproject.protostuff.ProtostuffIOUtil;
import com.dyuproject.protostuff.runtime.RuntimeSchema;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.game_machine.entity_system.Entity;
import com.game_machine.entity_system.Entities;
import com.game_machine.entity_system.Component;

import com.dyuproject.protostuff.Pipe;
import com.dyuproject.protostuff.Schema;

public final class <%=klass%> extends com.game_machine.entity_system.Component implements Externalizable, Message<<%=klass%>>, Schema<<%=klass%>>
{

    public static Schema<<%=klass%>> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static <%=klass%> getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final <%=klass%> DEFAULT_INSTANCE = new <%=klass%>();

    <%- message.getFields.each do |field| -%>
    <%- if field.isRepeated -%>
    private List<<%=field.getJavaType%>> <%=field.name -%>;
    <%- else -%>
    private <%=field.getJavaType%> <%=field.name -%>;
    <%- end -%>
    <%- end -%>
    

    public <%=klass%>()
    {
        
    }

<%- message.getFields.each do |field| -%>
<%- if field.isRepeated -%>
	public List<<%=field.getJavaType%>> get<%=field.getJavaType -%>List() {
		return <%= field.name %>;
	}

	public void set<%=field.getJavaType %>List(List<<%=field.getJavaType%>> <%=field.name%>) {
		this.<%=field.name%> = <%=field.name%>;
	}

	public <%=field.getJavaType %> get<%=field.getJavaType %>(int index)  {
        return <%=field.name%> == null ? null : <%=field.name%>.get(index);
    }

    public int get<%=field.getJavaType %>Count()  {
        return <%=field.name%> == null ? 0 : <%=field.name%>.size();
    }

    public void add<%=field.getJavaType %>(<%=field.getJavaType %> <%=field.name%>)  {
        if(this.<%=field.name%> == null)
            this.<%=field.name%> = new ArrayList<<%=field.getJavaType %>>();
        this.<%=field.name%>.add(<%=field.name%>);
    }
<%- else -%>
	public <%=field.getJavaType%> get<%=field.getJavaType -%>() {
		return <%= field.name %>;
	}
	public void set<%=field.getJavaType %>(<%=field.getJavaType%> <%=field.name%>) {
		this.<%=field.name%> = <%=field.name%>;
	}
<%- end -%>
<%- end -%>

  
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<<%=klass%>> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public <%=klass%> newMessage()
    {
        return new <%=klass%>();
    }

    public Class<<%=klass%>> typeClass()
    {
        return <%=klass%>.class;
    }

    public String messageName()
    {
        return <%=klass%>.class.getSimpleName();
    }

    public String messageFullName()
    {
        return <%=klass%>.class.getName();
    }

    public boolean isInitialized(<%=klass%> message)
    {
        return true;
    }

    public void mergeFrom(Input input, <%=klass%> message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                <%- message.getFields.each do |field| -%>
            	case <%=field.number%>:
            	<%- if field.isRepeated -%>
            		if(message.<%=field.name%> == null)
                        message.<%=field.name%> = new ArrayList<<%=field.getJavaType%>>();
                    message.<%=field.name%>.add(input.mergeObject(null, <%=field.getJavaType%>.getSchema()));
                    break;
                <%- else -%>
                	message.x = input.read<%=field.getClass.getSimpleName%>();
                    break;
                <%- end -%>
            	<%- end -%>
            
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, <%=klass%> message) throws IOException
    {
        if(message.player != null)
        {
            for(Player player : message.player)
            {
                if(player != null)
                    output.writeObject(1, player, Player.getSchema(), true);
            }
        }


        if(message.playersAroundMe != null)
        {
            for(PlayersAroundMe playersAroundMe : message.playersAroundMe)
            {
                if(playersAroundMe != null)
                    output.writeObject(2, playersAroundMe, PlayersAroundMe.getSchema(), true);
            }
        }


        if(message.gameCommand != null)
        {
            for(GameCommand gameCommand : message.gameCommand)
            {
                if(gameCommand != null)
                    output.writeObject(3, gameCommand, GameCommand.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "player";
            case 2: return "playersAroundMe";
            case 3: return "gameCommand";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("player", 1);
        __fieldMap.put("playersAroundMe", 2);
        __fieldMap.put("gameCommand", 3);
    }
    
    static final Pipe.Schema<<%=klass%>> PIPE_SCHEMA = new Pipe.Schema<<%=klass%>>(DEFAULT_INSTANCE)
    {
        protected void transfer(Pipe pipe, Input input, Output output) throws IOException
        {
            for(int number = input.readFieldNumber(wrappedSchema);; number = input.readFieldNumber(wrappedSchema))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        output.writeObject(number, pipe, Player.getPipeSchema(), true);
                        break;

                    case 2:
                        output.writeObject(number, pipe, PlayersAroundMe.getPipeSchema(), true);
                        break;

                    case 3:
                        output.writeObject(number, pipe, GameCommand.getPipeSchema(), true);
                        break;

                    default:
                        input.handleUnknownField(number, wrappedSchema);
                }
            }
        }
    };

    public static Pipe.Schema<<%=klass%>> getPipeSchema()
    {
        return PIPE_SCHEMA;
    }

    

}
