
package com.game_machine.entity_system.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;

import java.io.ByteArrayOutputStream;
import com.dyuproject.protostuff.JsonIOUtil;
import com.dyuproject.protostuff.LinkedBuffer;
import com.dyuproject.protostuff.ProtobufIOUtil;
import com.dyuproject.protostuff.ProtostuffIOUtil;
import com.dyuproject.protostuff.runtime.RuntimeSchema;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.game_machine.entity_system.Entities;
import com.game_machine.entity_system.generated.Entity;
import com.game_machine.entity_system.Component;

import com.dyuproject.protostuff.Pipe;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class <%=klass%> extends com.game_machine.entity_system.Component implements Externalizable, Message<<%=klass%>>, Schema<<%=klass%>>
{

<%- message.nestedEnumGroups.each do |group| -%>
	public enum <%=group.name %> implements com.dyuproject.protostuff.EnumLite<<%=group.name %>>
    {
    	<%- group.values.each do |value| -%>
    	<%= "#{value.getName}(#{value.getNumber})" %><%= value.getNumber == (group.values.length - 1) ? ";" : "," %>
    	<%- end -%>
        
        public final int number;
        
        private Corpus (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Corpus valueOf(int number)
        {
            switch(number) 
            {
            	<%- group.values.each do |value| -%>
    			case <%= "#{value.getNumber}: return (#{value.getName})" %>;
    			<%- end -%>
                default: return null;
            }
        }
    }
<%- end -%>


    public static Schema<<%=klass%>> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static <%=klass%> getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final <%=klass%> DEFAULT_INSTANCE = new <%=klass%>();

    <%- message.getFields.each do |field| -%>
    <%- if field.isRepeated -%>
    private List<<%=get_type(field)%>> <%=field.name -%>;
    <%- else -%>
    private <%=get_type(field)%> <%=field.name -%>;
    <%- end -%>
    <%- end -%>
    

    public <%=klass%>()
    {
        
    }

<%- message.getFields.each do |field| -%>
<%- field_name = field.name.slice(0,1).capitalize + field.name.slice(1..-1) -%>
<%- if field.isRepeated -%>
	public List<<%=get_type(field)%>> get<%=field_name -%>List() {
		return <%= field.name %>;
	}

	public void set<%=field_name %>List(List<<%=get_type(field)%>> <%=field.name%>) {
		this.<%=field.name%> = <%=field.name%>;
	}

	public <%=get_type(field) %> get<%=field_name %>(int index)  {
        return <%=field.name%> == null ? null : <%=field.name%>.get(index);
    }

    public int get<%=field_name %>Count()  {
        return <%=field.name%> == null ? 0 : <%=field.name%>.size();
    }

    public void add<%=field_name %>(<%=get_type(field) %> <%=field.name%>)  {
        if(this.<%=field.name%> == null)
            this.<%=field.name%> = new ArrayList<<%=get_type(field) %>>();
        this.<%=field.name%>.add(<%=field.name%>);
    }
<%- else -%>
	public <%=get_type(field)%> get<%=field_name -%>() {
		return <%= field.name %>;
	}
	public void set<%=field_name %>(<%=get_type(field)%> <%=field.name%>) {
		this.<%=field.name%> = <%=field.name%>;
	}
<%- end -%>
<%- end -%>

  
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<<%=klass%>> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public <%=klass%> newMessage()
    {
        return new <%=klass%>();
    }

    public Class<<%=klass%>> typeClass()
    {
        return <%=klass%>.class;
    }

    public String messageName()
    {
        return <%=klass%>.class.getSimpleName();
    }

    public String messageFullName()
    {
        return <%=klass%>.class.getName();
    }

    public boolean isInitialized(<%=klass%> message)
    {
        return true;
    }

    public void mergeFrom(Input input, <%=klass%> message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                <%- message.getFields.each do |field| -%>
            	case <%=field.number%>:
            	<%- if field.isRepeated -%>
            		if(message.<%=field.name%> == null)
                        message.<%=field.name%> = new ArrayList<<%=get_type(field)%>>();
                    <%- if field.isMessageField -%>
                    message.<%=field.name%>.add(input.mergeObject(null, <%=get_type(field)%>.getSchema()));
                    <%- elsif field.enumField -%>
                    message.<%=field.name%>.add(<%=get_type(field)%>.valueOf(input.readEnum()));
                    <%- else -%>
                	message.<%=field.name%>.add(input.read<%=field.getClass.getSimpleName%>());
                	<%- end -%>
                    break;
                <%- else -%>
                	<%- if field.isMessageField -%>
                	message.<%=field.name%> = input.mergeObject(message.<%=field.name%>, <%=get_type(field)%>.getSchema());
                    break;
                    <%- elsif field.enumField -%>
                    message.<%=field.name%> = <%=classname(field.name)%>.valueOf(input.readEnum());
                    break;
                	<%- else -%>
                	message.<%=field.name%> = input.read<%=field.getClass.getSimpleName%>();
                	break;
                	<%- end -%>
                	
                <%- end -%>
            	<%- end -%>
            
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, <%=klass%> message) throws IOException
    {
    	<%- message.getFields.each do |field| -%>
    	
    	<%- if field.isRequired -%>
    	if(message.<%=field.name%> == null)
            throw new UninitializedMessageException(message);
    	<%- end %>
    	
    	<%- if field.isRepeated -%>
    	if(message.<%=field.name%> != null)
        {
            for(<%=get_type(field)%> <%=field.name%> : message.<%=field.name%>)
            {
                if(<%=field.name%> != null) {
                   	<%- if field.isMessageField -%>
    				output.writeObject(<%=field.number%>, <%=field.name%>, <%=get_type(field)%>.getSchema(), true);
    				<%- elsif field.enumField -%>
    				output.writeEnum(<%=field.number%>, <%=field.name%>.number, true);
    				<%- else -%>
            		output.write<%=field.getClass.getSimpleName%>(<%=field.number%>, <%=field.name%>, true);
    				<%- end -%>
    			}
            }
        }
    	<%- else -%>
    	<%- if field.isMessageField -%>
    	if(message.<%=field.name%> != null)
    		output.writeObject(<%=field.number%>, message.<%=field.name%>, <%=get_type(field)%>.getSchema(), false);
    	<%- elsif field.enumField -%>
    	 	output.writeEnum(<%=field.number%>, message.<%=field.name%>.number, false);
    	<%- else -%>
    	if(message.<%=field.name%> != null)
            output.write<%=field.getClass.getSimpleName%>(<%=field.number%>, message.<%=field.name%>, false);
    	<%- end -%>
    	
    	<%- end -%>
        <%- end -%>
    	
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
        	<%- message.getFields.each do |field| -%>
        	case <%=field.number%>: return "<%=field.name%>";
        	<%- end -%>
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
    	<%- message.getFields.each do |field| -%>
    	__fieldMap.put("<%=field.name%>", <%=field.number%>);
    	<%- end -%>
    }
   
   public static List<String> getFields() {
	ArrayList<String> fieldNames = new ArrayList<String>();
	String fieldName = null;
	Integer i = 1;
	
    while(true) { 
		fieldName = <%=klass%>.getSchema().getFieldName(i);
		if (fieldName == null) {
			break;
		}
		fieldNames.add(fieldName);
		i++;
	}
	return fieldNames;
}

public static <%=klass%> parseFrom(byte[] bytes) {
	<%=klass%> message = new <%=klass%>();
	ProtobufIOUtil.mergeFrom(bytes, message, RuntimeSchema.getSchema(<%=klass%>.class));
	return message;
}

public <%=klass%> clone() {
	byte[] bytes = this.toByteArray("protobuf");
	<%=klass%> <%=varname(klass)%> = <%=klass%>.parseFrom(bytes);
	<%=varname(klass)%>.setEntityId(null);
	return <%=varname(klass)%>;
}
	
public byte[] toByteArray(String encoding) {
	if (encoding.equals("protobuf")) {
		return toProtobuf();
	} else if (encoding.equals("json")) {
		return toJson();
	} else {
		throw new RuntimeException("No encoding specified");
	}
}

public byte[] toJson() {
	boolean numeric = false;
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	try {
		JsonIOUtil.writeTo(out, this, <%=klass%>.getSchema(), numeric);
	} catch (IOException e) {
		e.printStackTrace();
		throw new RuntimeException("Json encoding failed");
	}
	return out.toByteArray();
}
		
public byte[] toProtobuf() {
	LinkedBuffer buffer = LinkedBuffer.allocate(1024);
	byte[] bytes = null;

	try {
		bytes = ProtobufIOUtil.toByteArray(this, RuntimeSchema.getSchema(<%=klass%>.class), buffer);
		buffer.clear();
	} catch (Exception e) {
		e.printStackTrace();
		throw new RuntimeException("Protobuf encoding failed");
	}
	return bytes;
}

   <%- if klass == 'Components' -%>
    public Entities toEntities() {
   		Entities entities = new Entities();
   		Entity entity = null;
   		Integer entityId = null;
   		<%- message.getFields.each do |field| -%>
   		for (<%=get_type(field)%> <%=field.name%> : this.get<%=classname(field.name)%>List()) {
   			entityId = <%=field.name%>.getEntityId();
   			if (entityId == null) {
   				continue;
   		 	}
   			if (entities.hasEntity(entityId)) {
   				entities.getEntity(entityId).set<%=classname(field.name)%>(<%=field.name%>);
   			} else {
   				entity = new Entity(entityId);
   				entity.set<%=classname(field.name)%>(<%=field.name%>);
   				entities.addEntity(entity);
   			}
   		}
   		<% end %>
   		return entities;
	}
    
	public static Components fromEntities(Entities entities) {
		Components components = new Components();
		for (Entity entity : entities.getEntities().values()) {
			<%- message.getFields.each do |field| -%>
			if (entity.has<%=classname(field.name)%>()) {
				components.add<%=classname(field.name)%>(entity.get<%=classname(field.name)%>());
			}
			<%- end -%>
		}
		return components;
	}
   <%- end -%> 
    

}
