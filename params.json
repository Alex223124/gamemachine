{"name":"Game machine","tagline":"Multiplayer game engine","body":"\r\n#Game Machine\r\n\r\nGame Machine is a highly performant, scalable massive multiplayer game engine written in\r\n[Jruby](http://www.jruby.org).\r\nIt is based on [Akka](http://www.akka.io), an actor based messaging system\r\nbuilt on the JVM.  Game machine makes it simple to write performant, scalable\r\ncode using higher level abstractions.  \r\n\r\n#Features\r\n\r\n- UDP/UDT/TCP networking.\r\n- Http for login/authorization.\r\n- Fully distributed architecture.\r\n  - Distributed player registry.\r\n  - Distributed player/npc controllers.\r\n  - Distributed grid with spatial hashing and fast neighbor lookups.\r\n  - Distributed chat/group system.\r\n- Entity component system.\r\n  - Entities and components are protocol buffers.\r\n  - Integrates seamlessly with Akka messaging.\r\n  - Everything is an entity/message.\r\n- Object persistence\r\n  - Distributed transactional updates.\r\n  - Memory based with write behind cache to key/value store.\r\n  - Pluggable persistence.  Coubhbase, Mapdb, and memory already supported.\r\n- Pathfinding based on Recastnavigation\r\n- Polyglot framework\r\n  - Java\r\n  - Scala\r\n  - Jruby\r\n  - C#\r\n\r\n#Installation\r\n\r\nThe old gem installation has been removed.  We are now putting together an\r\ninstall based on Vagrant, which will provide a complete working server out of\r\nthe box.\r\n\r\n#Documentation\r\n\r\nDocumentation and SDK's for Java, Ruby, and C# will be coming soon.\r\n\r\n#What's new\r\n\r\nC# actors via embedding mono is the main big feature that was added.  We are\r\ncurrentl working on the end user api and a Unity3D SDK.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}