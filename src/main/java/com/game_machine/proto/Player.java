// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from messages.proto

package com.game_machine.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Pipe;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Player implements Externalizable, Message<Player>, Schema<Player>
{

    public static Schema<Player> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Player getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Player DEFAULT_INSTANCE = new Player();

    
    private Integer x;
    private Integer y;
    private Integer z;
    private Integer id;
    private String name;

    public Player()
    {
        
    }

    public Player(
        Integer id
    )
    {
        this.id = id;
    }

    // getters and setters

    // x

    public Integer getX()
    {
        return x;
    }

    public void setX(Integer x)
    {
        this.x = x;
    }

    // y

    public Integer getY()
    {
        return y;
    }

    public void setY(Integer y)
    {
        this.y = y;
    }

    // z

    public Integer getZ()
    {
        return z;
    }

    public void setZ(Integer z)
    {
        this.z = z;
    }

    // id

    public Integer getId()
    {
        return id;
    }

    public void setId(Integer id)
    {
        this.id = id;
    }

    // name

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Player> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Player newMessage()
    {
        return new Player();
    }

    public Class<Player> typeClass()
    {
        return Player.class;
    }

    public String messageName()
    {
        return Player.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Player.class.getName();
    }

    public boolean isInitialized(Player message)
    {
        return 
            message.id != null;
    }

    public void mergeFrom(Input input, Player message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.x = input.readInt32();
                    break;
                case 2:
                    message.y = input.readInt32();
                    break;
                case 3:
                    message.z = input.readInt32();
                    break;
                case 4:
                    message.id = input.readInt32();
                    break;
                case 5:
                    message.name = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Player message) throws IOException
    {
        if(message.x != null)
            output.writeInt32(1, message.x, false);

        if(message.y != null)
            output.writeInt32(2, message.y, false);

        if(message.z != null)
            output.writeInt32(3, message.z, false);

        if(message.id == null)
            throw new UninitializedMessageException(message);
        output.writeInt32(4, message.id, false);

        if(message.name != null)
            output.writeString(5, message.name, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "x";
            case 2: return "y";
            case 3: return "z";
            case 4: return "id";
            case 5: return "name";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("x", 1);
        __fieldMap.put("y", 2);
        __fieldMap.put("z", 3);
        __fieldMap.put("id", 4);
        __fieldMap.put("name", 5);
    }
    
    static final Pipe.Schema<Player> PIPE_SCHEMA = new Pipe.Schema<Player>(DEFAULT_INSTANCE)
    {
        protected void transfer(Pipe pipe, Input input, Output output) throws IOException
        {
            for(int number = input.readFieldNumber(wrappedSchema);; number = input.readFieldNumber(wrappedSchema))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        output.writeInt32(number, input.readInt32(), false);
                        break;
                    case 2:
                        output.writeInt32(number, input.readInt32(), false);
                        break;
                    case 3:
                        output.writeInt32(number, input.readInt32(), false);
                        break;
                    case 4:
                        output.writeInt32(number, input.readInt32(), false);
                        break;
                    case 5:
                        input.transferByteRangeTo(output, true, number, false);
                        break;

                    default:
                        input.handleUnknownField(number, wrappedSchema);
                }
            }
        }
    };

    public static Pipe.Schema<Player> getPipeSchema()
    {
        return PIPE_SCHEMA;
    }

}
