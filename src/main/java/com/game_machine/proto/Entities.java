// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from messages.proto

package com.game_machine.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Pipe;
import com.dyuproject.protostuff.Schema;

public final class Entities implements Externalizable, Message<Entities>, Schema<Entities>
{

    public static Schema<Entities> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Entities getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Entities DEFAULT_INSTANCE = new Entities();

    
    private List<Entity> entity;

    public Entities()
    {
        
    }

    // getters and setters

    // entity

    public List<Entity> getEntityList()
    {
        return entity;
    }

    public void setEntityList(List<Entity> entity)
    {
        this.entity = entity;
    }

    public Entity getEntity(int index)
    {
        return entity == null ? null : entity.get(index);
    }

    public int getEntityCount()
    {
        return entity == null ? 0 : entity.size();
    }

    public void addEntity(Entity entity)
    {
        if(this.entity == null)
            this.entity = new ArrayList<Entity>();
        this.entity.add(entity);
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Entities> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Entities newMessage()
    {
        return new Entities();
    }

    public Class<Entities> typeClass()
    {
        return Entities.class;
    }

    public String messageName()
    {
        return Entities.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Entities.class.getName();
    }

    public boolean isInitialized(Entities message)
    {
        return true;
    }

    public void mergeFrom(Input input, Entities message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.entity == null)
                        message.entity = new ArrayList<Entity>();
                    message.entity.add(input.mergeObject(null, Entity.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Entities message) throws IOException
    {
        if(message.entity != null)
        {
            for(Entity entity : message.entity)
            {
                if(entity != null)
                    output.writeObject(1, entity, Entity.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "entity";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("entity", 1);
    }
    
    static final Pipe.Schema<Entities> PIPE_SCHEMA = new Pipe.Schema<Entities>(DEFAULT_INSTANCE)
    {
        protected void transfer(Pipe pipe, Input input, Output output) throws IOException
        {
            for(int number = input.readFieldNumber(wrappedSchema);; number = input.readFieldNumber(wrappedSchema))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        output.writeObject(number, pipe, Entity.getPipeSchema(), true);
                        break;

                    default:
                        input.handleUnknownField(number, wrappedSchema);
                }
            }
        }
    };

    public static Pipe.Schema<Entities> getPipeSchema()
    {
        return PIPE_SCHEMA;
    }

}
