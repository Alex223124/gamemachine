// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from messages.proto

package com.game_machine.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;

import java.io.ByteArrayOutputStream;
import com.game_machine.Config;
import com.dyuproject.protostuff.JsonIOUtil;
import com.dyuproject.protostuff.LinkedBuffer;
import com.dyuproject.protostuff.ProtobufIOUtil;
import com.dyuproject.protostuff.ProtostuffIOUtil;
import com.dyuproject.protostuff.runtime.RuntimeSchema;


import com.dyuproject.protostuff.Pipe;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class GameCommand extends com.game_machine.Component implements Externalizable, Message<GameCommand>, Schema<GameCommand>
{

    public static Schema<GameCommand> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static GameCommand getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final GameCommand DEFAULT_INSTANCE = new GameCommand();

    
    private String name;
    private Integer entityId;

    public GameCommand()
    {
        
    }

    public GameCommand(
        String name
    )
    {
        this.name = name;
    }

    // getters and setters

    // name

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    // entityId

    public Integer getEntityId()
    {
        return entityId;
    }

    public void setEntityId(Integer entityId)
    {
        this.entityId = entityId;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<GameCommand> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public GameCommand newMessage()
    {
        return new GameCommand();
    }

    public Class<GameCommand> typeClass()
    {
        return GameCommand.class;
    }

    public String messageName()
    {
        return GameCommand.class.getSimpleName();
    }

    public String messageFullName()
    {
        return GameCommand.class.getName();
    }

    public boolean isInitialized(GameCommand message)
    {
        return 
            message.name != null;
    }

    public void mergeFrom(Input input, GameCommand message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;
                case 2:
                    message.entityId = input.readInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, GameCommand message) throws IOException
    {
        if(message.name == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.name, false);

        if(message.entityId != null)
            output.writeInt32(2, message.entityId, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "name";
            case 2: return "entityId";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("name", 1);
        __fieldMap.put("entityId", 2);
    }
    
    static final Pipe.Schema<GameCommand> PIPE_SCHEMA = new Pipe.Schema<GameCommand>(DEFAULT_INSTANCE)
    {
        protected void transfer(Pipe pipe, Input input, Output output) throws IOException
        {
            for(int number = input.readFieldNumber(wrappedSchema);; number = input.readFieldNumber(wrappedSchema))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        input.transferByteRangeTo(output, true, number, false);
                        break;

                    case 2:
                        output.writeInt32(number, input.readInt32(), false);
                        break;
                    default:
                        input.handleUnknownField(number, wrappedSchema);
                }
            }
        }
    };

    public static Pipe.Schema<GameCommand> getPipeSchema()
    {
        return PIPE_SCHEMA;
    }

    public static GameCommand parseFrom(byte[] bytes) {
    	GameCommand message = new GameCommand();
    	ProtobufIOUtil.mergeFrom(bytes, message, RuntimeSchema.getSchema(GameCommand.class));
    	return message;
    }
    	
    public byte[] toByteArray() {
    	if (Config.messageEncoding.equals("protobuf")) {
    		return toProtobuf();
    	} else if (Config.messageEncoding.equals("json")) {
    		return toJson();
    	} else {
    		throw new RuntimeException("No encoding specified");
    	}
    }

    public byte[] toJson() {
    	boolean numeric = false;
    	ByteArrayOutputStream out = new ByteArrayOutputStream();
    	try {
    		JsonIOUtil.writeTo(out, this, GameCommand.getSchema(), numeric);
    	} catch (IOException e) {
    		e.printStackTrace();
    		throw new RuntimeException("Json encoding failed");
    	}
    	return out.toByteArray();
    }
    		
    public byte[] toProtobuf() {
    	LinkedBuffer buffer = LinkedBuffer.allocate(1024);
    	byte[] bytes = null;

    	try {
    		bytes = ProtobufIOUtil.toByteArray(this, RuntimeSchema.getSchema(GameCommand.class), buffer);
    		buffer.clear();
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new RuntimeException("Protobuf encoding failed");
    	}
    	return bytes;
    }

}
